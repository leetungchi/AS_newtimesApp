package exgui;
import javax.swing.*;
import java.util.Vector;
import java.util.HashMap;
import database.datatype.Record;
/**
 * <p>Title: </p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2002</p>
 * <p>Company: </p>
 * @author unascribed
 * @version 1.0
 */

public class DataBindJCombobox extends DataBindGUIObject implements SwingSingleSelection{
  JComboBox _jcbx=null;
  Vector _records=null;
  String pkField=null;
  String _iniString=null;
  String _iniStringValue=null;
  Object orgObj=null;
  boolean forcedChangedFlag=false;
  public DataBindJCombobox(JComboBox jcbx,Vector records,String showColumn,String matchColumn,Object select2value,String iniString,String iniStringValue) {
      super();
      pkField=matchColumn;
      //HashMap hm=new HashMap();
      //hm.put(matchColumn,select2value);
      //ini(jcbx,records,showColumn,hm,iniString,iniStringValue);
      ini20040613(jcbx,records,showColumn,matchColumn,select2value,iniString,iniStringValue);
      if(jcbx.isEditable()){
      jcbx.setSelectedItem(select2value);}
  }
  public DataBindJCombobox(JComboBox jcbx,String fromCurrRecordField,Vector records,String showColumn,String matchColumn,Object select2value,String iniString,String iniStringValue) {
      super();
      //HashMap hm=new HashMap();
      pkField=matchColumn;
      _match2RecField=fromCurrRecordField;
      //hm.put(matchColumn,select2value);
      //ini(jcbx,records,showColumn,hm,iniString,iniStringValue);
      ini20040613(jcbx,records,showColumn,matchColumn,select2value,iniString,iniStringValue);
      if(jcbx.isEditable()){
      jcbx.setSelectedItem(select2value);}
  }
  public DataBindJCombobox(JComboBox jcbx,Vector records,String showColumn,String matchColumn,Object select2value) {
      super();
      pkField=matchColumn;
      //HashMap hm=new HashMap();
      //hm.put(matchColumn,select2value);
      //ini(jcbx,records,showColumn,hm,null,null);
      ini20040613(jcbx,records,showColumn,matchColumn,select2value);
      if(jcbx.isEditable()){
      jcbx.setSelectedItem(select2value);}
  }
  public DataBindJCombobox(JComboBox jcbx,String fromCurrRecordField,Vector records,String showColumn,String matchColumn,Object select2value) {
      super();
      pkField=matchColumn;
      _match2RecField=fromCurrRecordField;
      //HashMap hm=new HashMap();
      //hm.put(matchColumn,select2value);
      //ini(jcbx,records,showColumn,hm,null,null);
      ini20040613(jcbx,records,showColumn,matchColumn,select2value);
      if(jcbx.isEditable()){
      jcbx.setSelectedItem(select2value);}
  }
  public DataBindJCombobox(JComboBox jcbx,String fromCurrRecordField,Vector records,String showColumn,HashMap hm) {
      super();
      _match2RecField=fromCurrRecordField;
      ini(jcbx,records,showColumn,hm,null,null);
  }
  protected void ini20040613(JComboBox jcbx,Vector records,
                     String showColumn,
                     String matchColumn,Object orgValue) {
    jcbx.removeAllItems();
    if(records!=null && records.size()>0){
      HashMap mp2Init = new HashMap();
      int matchColumnAt =util.MiscFunc.getFieldIndexAtRecord((Record)records.get(0),matchColumn);
      int showColumnAt =0;
      if(!matchColumn.equalsIgnoreCase(showColumn)){
        showColumnAt= util.MiscFunc.getFieldIndexAtRecord((Record)records.get(0), showColumn);
      }else{
        showColumnAt= matchColumnAt;
      }
      for(int i=0;i<records.size();i++){
         Record rec=(Record)records.get(i);
         exgui.ultratable.Wraper4tblCbx xObj = new exgui.ultratable.Wraper4tblCbx(
                                       rec.get(matchColumnAt),(String)rec.get(showColumnAt));
         mp2Init.put(rec.get(matchColumnAt),xObj);
         jcbx.addItem(xObj);
      }
      jcbx.setSelectedItem(mp2Init.get(orgValue));
      _records = records;
    }
    _jcbx = jcbx;
    if(!_jcbx.isEditable()){
      orgObj = getSelectedValue();
    }else{
      //_jcbx.setSelectedItem(orgObj);
    }
  }

  protected void ini20040613(JComboBox jcbx,Vector records,
                     String showColumn,
                     String matchColumn,Object orgValue,
                     String iniString,String iniStringValue) {
    jcbx.removeAllItems();
    if(records!=null && records.size()>0){
      HashMap mp2Init = new HashMap();
      exgui.ultratable.Wraper4tblCbx initObj = new exgui.ultratable.Wraper4tblCbx(iniStringValue, iniStringValue);
      mp2Init.put(iniStringValue, initObj);
      jcbx.addItem(initObj);
      int matchColumnAt =util.MiscFunc.getFieldIndexAtRecord((Record)records.get(0),matchColumn);
      int showColumnAt =0;
      if(!matchColumn.equalsIgnoreCase(showColumn)){
        showColumnAt= util.MiscFunc.getFieldIndexAtRecord((Record)records.get(0), showColumn);
      }else{
        showColumnAt= matchColumnAt;
      }
      for(int i=0;i<records.size();i++){
         Record rec=(Record)records.get(i);
         exgui.ultratable.Wraper4tblCbx xObj = new exgui.ultratable.Wraper4tblCbx(
                                       rec.get(matchColumnAt),(String)rec.get(showColumnAt));
         mp2Init.put(rec.get(matchColumnAt),xObj);
         jcbx.addItem(xObj);
      }
      jcbx.setSelectedItem(mp2Init.get(orgValue));
      _iniString = iniString;
      _iniStringValue = iniStringValue;
      _records = records;
    }
    _jcbx = jcbx;
    if(!_jcbx.isEditable()){
      orgObj = getSelectedValue();
    }else{
      //_jcbx.setSelectedItem(orgObj);
    }
  }
  protected void ini(JComboBox jcbx,Vector records,String showColumn,HashMap hm,String iniString,String iniStringValue) {
    jcbx.removeAllItems();
    UIHelper.Data2ComboBox(jcbx,records,showColumn,hm,iniString,iniStringValue );
    _iniString=iniString;
    _iniStringValue=iniStringValue;
    _jcbx=jcbx;_records=records;
    if(pkField==null){
      if (_records.size() > 0) {
        Record rec = (Record)_records.get(0);
        pkField = (String)rec.getPk().get(0);
      }
    }
    if(!_jcbx.isEditable()){
      orgObj = getSelectedValue();
    }else{
      orgObj=hm.get(showColumn);
      _jcbx.setSelectedItem(orgObj);
    }
  }
  public Object getSelectedValue(){
    if(_jcbx.isEditable()){
      Object objrtn= _jcbx.getSelectedItem();
      if(objrtn!=null)return objrtn.toString();
      return "";
    }
    if(_records==null || _records.size()==0){
      //return null; for user, pleaes add default value if no records to select
      return _iniStringValue;
    }
    if(_jcbx.getSelectedIndex()==-1){
       _jcbx.setSelectedIndex(0);
     }
     exgui.ultratable.Wraper4tblCbx selectedObj=(exgui.ultratable.Wraper4tblCbx)_jcbx.getSelectedItem();
     return selectedObj.getValue();
   /*
   if(_iniString !=null){
     if(_jcbx.getSelectedIndex()==0)
       return _iniStringValue;
      else
       return getObjByIndexRocords(_jcbx.getSelectedIndex()-1,pkField);
   }else{
      //exgui.ultratable.Wraper4tblCbx selectedObj=(exgui.ultratable.Wraper4tblCbx)_jcbx.getSelectedItem();
      //return selectedObj.getValue();
      return UIHelper.ComboBox2Data(_jcbx,_records,pkField);
   }
   */
  }
  protected Object getObjByIndexRocords(int selectedIndex,String pkField){
    try{
      return  ((Record)_records.get(selectedIndex)).get(pkField);
    }catch(Exception e){
     e.printStackTrace();
     util.ExceptionLog.exp2File(e,"exp while getting stored object value in jcombobox");
     return null;
    }
  }
  public void toMustModify(){
    forcedChangedFlag=true;
  }
  public boolean isChanged(){
     Object rtnObj=getSelectedValue();
     if(orgObj==null) return rtnObj!=null;
     boolean changed= !orgObj.equals(rtnObj);
     if(!changed){
       //if forcedChangedFlag is setup,means this column is force to update.
       if(forcedChangedFlag){
         forcedChangedFlag=false;
         return true;
       }
       return false;
     }else{
       forcedChangedFlag=false;
       return changed;
     }
  }
  public JComponent getGUIcomponent(){
    return _jcbx;
  }
}
