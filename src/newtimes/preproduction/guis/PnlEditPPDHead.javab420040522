package newtimes.preproduction.guis;
import java.awt.*;
import processhandler.template.PnlFieldsEditor;
import exgui.*;
import javax.swing.*;
import exgui2.*;
import javax.swing.border.*;
import newtimes.preproduction.buyermakerselect.*;
import newtimes.preproduction.process.DB_Preprod;
import java.util.Vector;
import database.datatype.Record;
import java.awt.event.*;
/**
 * <p>Title: </p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: </p>
 * @author not attributable
 * @version 1.0
 */

public class PnlEditPPDHead
  extends processhandler.template.PnlFieldsEditor
  //extends JPanel
 implements MouseMotionListener ,
  newtimes.preproduction.buyermakerselect.BuyerMakerChanged{
  DB_Preprod myDbHander;
  BorderLayout borderLayout1 = new BorderLayout();
  GridLayout gridLayout=new GridLayout(1,1);
  JPanel jPanel1 = new JPanel();
  JLabel blueBkgWhiteCharLabel3 = new JLabel();
  //JLabel whiteBkgBlueCharLabel6 = new JLabel();
  exgui.BlueBkgWhiteCharLabel whiteBkgBlueCharLabel6 = new exgui.BlueBkgWhiteCharLabel();
  Border border1;
  JPanel subPnlProto = new JPanel();
  TitledBorder titledBorder1;
  JTextField txtPrtPriceRmk = new JTextField();
  JTextField txtPrtGauge = new JTextField();
  JLabel whiteBkgBlueCharLabel14 = new JLabel();
  JLabel blueBkgWhiteCharLabel11 = new JLabel();
  JComboBox cbxPrtQtaCtg = new JComboBox();
  JLabel whiteBkgBlueCharLabel12 = new JLabel();
  JTextField txtPrtSpcRcv = new JTextField();
  JLabel blueBkgWhiteCharLabel10 = new JLabel();
  JTextField txtPrtGnlRmk = new JTextField();
  JLabel blueBkgWhiteCharLabel12 = new JLabel();
  JLabel whiteBkgBlueCharLabel11 = new JLabel();
  JLabel blueBkgWhiteCharLabel14 = new JLabel();
  JTextField txtPrtEstmSnd = new JTextField();
  JTextField txtPrtQltyDesc = new JTextField();
  JLabel blueBkgWhiteCharLabel15 = new JLabel();
  JTextField txtPrtLayoutRcv = new JTextField();
  JTextField txtPrtWstg = new JTextField();
  JLabel blueBkgWhiteCharLabel13 = new JLabel();
  JLabel whiteBkgBlueCharLabel13 = new JLabel();
  JTextField txtPrtAvgWt = new JTextField();
  JPanel subPnlLockIn = new JPanel();

  TitledBorder titledBorder2;
  JLabel whiteBkgBlueCharLabel15 = new JLabel();
  JLabel blueBkgWhiteCharLabel17 = new JLabel();
  JLabel blueBkgWhiteCharLabel19 = new JLabel();
  JTextField txtLkinDlvyDate = new JTextField();

  JTextField txtLkinRmk = new JTextField();
  JLabel blueBkgWhiteCharLabel16 = new JLabel();
  JTextField txtLkinDvn = new JTextField();
  JLabel whiteBkgBlueCharLabel16 = new JLabel();
  JLabel blueBkgWhiteCharLabel18 = new JLabel();
  JPanel subPnlLapDip = new JPanel();

  Border border2;
  TitledBorder titledBorder3;
  JLabel whiteBkgBlueCharLabel8 = new JLabel();
  JTextField txtBulkTgtDate = new JTextField();
  JLabel blueBkgWhiteCharLabel8 = new JLabel();
  JLabel blueBkgWhiteCharLabel7 = new JLabel();
  JTextField txtLapDipFxyDate = new JTextField();
  JTextField txtLapDipRcvDate = new JTextField();
  SelectBuyerMaker slkLknMaker = new SelectBuyerMaker();
  SelectBuyerMaker slkLknBuyer = new SelectBuyerMaker();
  boolean isProcessingPast=false;
  boolean isInitializingCountriesCbx=false;
  JComboBox cbxLknDep = new JComboBox();
  Vector respondingMTR_V_Records=new Vector();
  JButton btn2SelectMtrls = new JButton();
  JLabel lblMtrList = new JLabel();
  JTextField txtProdByrPlnDlvy = new JTextField();
  DataBindTextWithChecker buyerPlanDlvDbCheck=null;
  boolean isGrayied=false;
  //JLabel lblDisplayProdheadPK = new JLabel();
  exgui.BlueBkgWhiteCharLabel   lblDisplayProdheadPK=new exgui.BlueBkgWhiteCharLabel();
  JPanel jPanel2 = new JPanel();
  JLabel whiteBkgBlueCharLabel1 = new JLabel();
  JComboBox cbxCenter = new JComboBox();

  JComboBox cbxDep = new JComboBox();
  JLabel blueBkgWhiteCharLabel1 = new JLabel();
  JLabel blueBkgWhiteCharLabel5 = new JLabel();
  JComboBox cbxManagers = new JComboBox();
  JLabel whiteBkgBlueCharLabel17 = new JLabel();
  JTextField txtYear = new JTextField();
  JComboBox cbxSzn = new JComboBox();
  JLabel blueBkgWhiteCharLabel23 = new JLabel();
  JPanel jPanel3 = new JPanel();
  JLabel blueBkgWhiteCharLabel2 = new JLabel();
  SelectBuyerMaker slkHeadBuyer = new SelectBuyerMaker();
  SelectBuyerMaker slkHeadMaker = new SelectBuyerMaker();
  JLabel blueBkgWhiteCharLabel6 = new JLabel();
  JPanel jPanel4 = new JPanel();
  JComboBox cbxProductionType = new JComboBox();
  JLabel whiteBkgBlueCharLabel9 = new JLabel();
  JPanel jPanel5 = new JPanel();
  JLabel whiteBkgBlueCharLabel18 = new JLabel();
  JTextField txtProdByrWdwFrom = new JTextField();
  JLabel whiteBkgBlueCharLabel19 = new JLabel();
  JTextField txtProdByrWdwTo = new JTextField();
  JLabel blueBkgWhiteCharLabel22 = new JLabel();
  boolean needtoCheckDiv=false;
  JComboBox cbxDiv = new JComboBox();
  JLabel whiteBkgBlueCharLabel2 = new JLabel();
  JLabel whiteBkgBlueCharLabel20 = new JLabel();
  JComboBox cbxOffShrCntr = new JComboBox();
  exgui.DataBindJCombobox dbCbxdiv=null;
  exgui.DataBindJCombobox DbJcbxcbxQcCountry =null;
  boolean isProcessingData2Gui=false;
  int dbCbxDepIndex=0;
  int dbCbxDivIndex=0;
  DataBindJCombobox dbCBX_Center,dbCBX_Dep,dbCbxSzn,dbCbxProdType;
  java.util.Vector recDests,branches;
  public PnlEditPPDHead() {
    try {
      jbInit();
      recordColumnsToCopy=null;
       this.addMouseMotionListener(this);
    }
    catch(Exception ex) {
      ex.printStackTrace();
    }
  }

 public void grayMe(){
   super.grayMe();
   isGrayied=true;
 }
 public void mouseMoved(MouseEvent e){

 }
 public void mouseDragged(MouseEvent e){

 }

 protected  void jbInit() throws Exception {
    this.setPreferredSize(new Dimension(930,650));
    setBackground(new Color(204, 204, 225));
    jPanel1.setBackground(new Color(204, 204, 225));
    subPnlProto.setBackground(new Color(204, 204, 225));
    subPnlLockIn.setBackground(new Color(204, 204, 225));
    subPnlLapDip.setBackground(new Color(204, 204, 225));
    border1 = BorderFactory.createBevelBorder(BevelBorder.RAISED,Color.white,Color.white,new Color(124, 124, 124),new Color(178, 178, 178));
    titledBorder1 = new TitledBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED,Color.white,Color.white,new Color(103, 101, 98),new Color(148, 145, 140)),"Proto");
    titledBorder2 = new TitledBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED,Color.white,Color.white,new Color(103, 101, 98),new Color(148, 145, 140)),"Lock In");
    border2 = BorderFactory.createBevelBorder(BevelBorder.LOWERED,Color.white,Color.white,new Color(103, 101, 98),new Color(148, 145, 140));
    titledBorder3 = new TitledBorder(border2,"Lap Dip");
    this.setLayout(borderLayout1);
    //this.setLayout(gridLayout);
    jPanel1.setLayout(null);
    blueBkgWhiteCharLabel3.setBounds(new Rectangle(7, 273, 86, 24));
    blueBkgWhiteCharLabel3.setText("Material No.");
    whiteBkgBlueCharLabel6.setBackground(new Color(143, 143, 188));
    whiteBkgBlueCharLabel6.setForeground(Color.white);
    whiteBkgBlueCharLabel6.setText("Pre Prodution");
    whiteBkgBlueCharLabel6.setBounds(new Rectangle(55, 2, 725, 28));
    subPnlProto.setBorder(titledBorder1);
    subPnlProto.setDebugGraphicsOptions(0);
    subPnlProto.setBounds(new Rectangle(8, 514, 737, 194));
    subPnlProto.setLayout(null);
    txtPrtPriceRmk.setBounds(new Rectangle(607, 144, 81, 24));
    txtPrtPriceRmk.setText("");
    txtPrtGauge.setBounds(new Rectangle(609, 35, 80, 24));
    txtPrtGauge.setText("");
    whiteBkgBlueCharLabel14.setBounds(new Rectangle(233, 145, 123, 21));
    whiteBkgBlueCharLabel14.setText("Quota Category");
    blueBkgWhiteCharLabel11.setBounds(new Rectangle(5, 68, 77, 33));
    blueBkgWhiteCharLabel11.setText("<html><body>Specification<br>Received</body></html>");
    cbxPrtQtaCtg.setBounds(new Rectangle(353, 144, 130, 20));
    whiteBkgBlueCharLabel12.setBounds(new Rectangle(233, 70, 123, 21));
    whiteBkgBlueCharLabel12.setText("Layout Received");
    txtPrtSpcRcv.setBounds(new Rectangle(121, 70, 91, 24));
    txtPrtSpcRcv.setText("");
    blueBkgWhiteCharLabel10.setBounds(new Rectangle(507, 35, 102, 24));
    blueBkgWhiteCharLabel10.setText("Proto Guage");
    txtPrtGnlRmk.setText("");
    txtPrtGnlRmk.setBounds(new Rectangle(353, 106, 130, 21));
    blueBkgWhiteCharLabel12.setText("Estimate Send");
    blueBkgWhiteCharLabel12.setBounds(new Rectangle(5, 110, 88, 24));
    whiteBkgBlueCharLabel11.setText("Proto Quality Desc");
    whiteBkgBlueCharLabel11.setBounds(new Rectangle(231, 34, 121, 21));
    blueBkgWhiteCharLabel14.setBounds(new Rectangle(8, 146, 63, 24));
    blueBkgWhiteCharLabel14.setText("Wastage");
    txtPrtEstmSnd.setText("");
    txtPrtEstmSnd.setBounds(new Rectangle(120, 107, 92, 24));
    txtPrtQltyDesc.setText("");
    txtPrtQltyDesc.setBounds(new Rectangle(353, 33, 130, 24));
    blueBkgWhiteCharLabel15.setBounds(new Rectangle(506, 144, 102, 24));
    blueBkgWhiteCharLabel15.setText("Price Remark");
    txtPrtLayoutRcv.setBounds(new Rectangle(353, 69, 130, 21));
    txtPrtLayoutRcv.setText("");
    txtPrtWstg.setBounds(new Rectangle(119, 149, 93, 24));
    txtPrtWstg.setText("");
    blueBkgWhiteCharLabel13.setText("Average Weight");
    blueBkgWhiteCharLabel13.setBounds(new Rectangle(506, 106, 102, 24));
    whiteBkgBlueCharLabel13.setText("General Remark");
    whiteBkgBlueCharLabel13.setBounds(new Rectangle(233, 107, 123, 21));
    txtPrtAvgWt.setText("");
    txtPrtAvgWt.setBounds(new Rectangle(607, 106, 81, 24));
    subPnlLockIn.setBorder(titledBorder2);
    subPnlLockIn.setBounds(new Rectangle(8, 711, 737, 102));
    subPnlLockIn.setLayout(null);
    whiteBkgBlueCharLabel15.setBounds(new Rectangle(261, 67, 108, 21));
    whiteBkgBlueCharLabel15.setText("Lockin Department");
    blueBkgWhiteCharLabel17.setText("Lockin Factory");
    blueBkgWhiteCharLabel17.setBounds(new Rectangle(5, 64, 89, 24));
    blueBkgWhiteCharLabel19.setText("Lockin Remark");
    blueBkgWhiteCharLabel19.setBounds(new Rectangle(514, 64, 94, 24));
    txtLkinDlvyDate.setBounds(new Rectangle(609, 26, 62, 24));
    txtLkinDlvyDate.setText("");
    txtLkinRmk.setText("");
    txtLkinRmk.setBounds(new Rectangle(607, 62, 123, 26));
    blueBkgWhiteCharLabel16.setBounds(new Rectangle(6, 24, 82, 24));
    blueBkgWhiteCharLabel16.setText("Lockin Buyer");
    txtLkinDvn.setText("");
    txtLkinDvn.setBounds(new Rectangle(379, 26, 130, 21));
    whiteBkgBlueCharLabel16.setText("Lockin Division");
    whiteBkgBlueCharLabel16.setBounds(new Rectangle(294, 27, 87, 21));
    blueBkgWhiteCharLabel18.setBounds(new Rectangle(530, 26, 78, 24));
    blueBkgWhiteCharLabel18.setText("Delivery Date");
    subPnlLapDip.setBorder(titledBorder3);
    subPnlLapDip.setBounds(new Rectangle(8, 454, 737, 58));
    subPnlLapDip.setLayout(null);
    whiteBkgBlueCharLabel8.setText("Standard to Factory");
    whiteBkgBlueCharLabel8.setBounds(new Rectangle(233, 18, 117, 24));
    txtBulkTgtDate.setBounds(new Rectangle(608, 19, 61, 24));
    txtBulkTgtDate.setText("");
    blueBkgWhiteCharLabel8.setBounds(new Rectangle(497, 20, 111, 24));
    blueBkgWhiteCharLabel8.setText("Bulk Target Date");
    blueBkgWhiteCharLabel7.setText("Standard Received");
    blueBkgWhiteCharLabel7.setBounds(new Rectangle(6, 19, 118, 24));
    txtLapDipFxyDate.setText("");
    txtLapDipFxyDate.setBounds(new Rectangle(350, 19, 60, 24));
    txtLapDipRcvDate.setBounds(new Rectangle(132, 19, 60, 24));
    txtLapDipRcvDate.setText("");
    slkLknMaker.setBounds(new Rectangle(89, 65, 165, 23));
    slkLknBuyer.setBounds(new Rectangle(85, 23, 167, 24));
    cbxLknDep.setBounds(new Rectangle(370, 68, 137, 20));
    btn2SelectMtrls.setBounds(new Rectangle(72, 275, 30, 24));
    btn2SelectMtrls.setFont(new java.awt.Font("Dialog", 1, 12));
    btn2SelectMtrls.setMargin(new Insets(0, 5, 0, 5));
    btn2SelectMtrls.setText("...");
    btn2SelectMtrls.addActionListener(new PnlEditPPDHead_btn2SelectMtrls_actionAdapter(this));
    lblMtrList.setBorder(BorderFactory.createLoweredBevelBorder());
    lblMtrList.setText("");
    lblMtrList.setBounds(new Rectangle(100, 274, 643, 24));
    //this.add(jPanel1);
    txtProdByrPlnDlvy.setText("");
    txtProdByrPlnDlvy.setBounds(new Rectangle(101, 6, 66, 21));
    //txtProdByrPlnDlvy.addFocusListener(new PnlEditPPDHead_txtProdByrPlnDlvy_focusAdapter(this));
    lblDisplayProdheadPK.setForeground(Color.red);
    lblDisplayProdheadPK.setText("");
    lblDisplayProdheadPK.setBounds(new Rectangle(0, 2, 55, 28));
    jPanel2.setBackground(new Color(204, 204, 225));
    jPanel2.setBorder(BorderFactory.createEtchedBorder());
    jPanel2.setBounds(new Rectangle(5, 36, 164, 230));
    jPanel2.setLayout(null);
    whiteBkgBlueCharLabel1.setForeground(Color.red);
    whiteBkgBlueCharLabel1.setRequestFocusEnabled(true);
    whiteBkgBlueCharLabel1.setText("*Depart");
    whiteBkgBlueCharLabel1.setBounds(new Rectangle(5, 86, 67, 23));
    cbxCenter.setBounds(new Rectangle(72, 8, 86, 23));
    cbxCenter.addItemListener(
        new PnlEditPPDHead_cbxCenter_itemAdapter(this)
        );

    cbxDep.setBounds(new Rectangle(72, 85, 86, 23));
    blueBkgWhiteCharLabel1.setForeground(Color.red);
    blueBkgWhiteCharLabel1.setText("*Center");
    blueBkgWhiteCharLabel1.setBounds(new Rectangle(7, 10, 62, 23));
    blueBkgWhiteCharLabel5.setBounds(new Rectangle(8, 123, 60, 23));
    blueBkgWhiteCharLabel5.setForeground(Color.red);
    blueBkgWhiteCharLabel5.setText("*Manager");
    cbxManagers.setBounds(new Rectangle(72, 124, 86, 23));
    whiteBkgBlueCharLabel17.setForeground(Color.red);
    whiteBkgBlueCharLabel17.setText("*Year");
    whiteBkgBlueCharLabel17.setBounds(new Rectangle(30, 165, 38, 23));
    txtYear.setBounds(new Rectangle(72, 164, 86, 23));
    txtYear.setText("");
    cbxSzn.setBounds(new Rectangle(72, 204, 86, 23));
    blueBkgWhiteCharLabel23.setForeground(Color.red);
    blueBkgWhiteCharLabel23.setText("*Season");
    blueBkgWhiteCharLabel23.setBounds(new Rectangle(11, 204, 57, 23));
    jPanel3.setBackground(new Color(204, 204, 225));
    jPanel3.setBorder(BorderFactory.createEtchedBorder());
    jPanel3.setBounds(new Rectangle(171, 36, 215, 230));
    jPanel3.setLayout(null);
    blueBkgWhiteCharLabel2.setForeground(Color.red);
    blueBkgWhiteCharLabel2.setText("*Buyer");
    blueBkgWhiteCharLabel2.setBounds(new Rectangle(3, 7, 57, 24));
    slkHeadBuyer.setBounds(new Rectangle(63, 8, 144, 24));
    slkHeadMaker.setBounds(new Rectangle(63, 62, 144, 24));
    slkHeadMaker.setModifyNotifyTo(this);
    slkHeadBuyer.setModifyNotifyTo(new ChangeBuyerHandler());
    blueBkgWhiteCharLabel6.setBounds(new Rectangle(2, 62, 58, 24));
    blueBkgWhiteCharLabel6.setForeground(Color.red);
    blueBkgWhiteCharLabel6.setText("*Maker");
    //cbxCountry.addItemListener(new PnlEditPPDHead_cbxCountry_itemAdapter(this));
    jPanel4.setBackground(new Color(204, 204, 225));
    jPanel4.setBorder(BorderFactory.createEtchedBorder());
    jPanel4.setBounds(new Rectangle(387, 35, 177, 231));
    jPanel4.setLayout(null);
    cbxProductionType.setBounds(new Rectangle(45, 80, 128, 24));
    whiteBkgBlueCharLabel9.setBounds(new Rectangle(2, 80, 44, 20));
    whiteBkgBlueCharLabel9.setBackground(Color.white);
    whiteBkgBlueCharLabel9.setText("TYPE");
    jPanel5.setBackground(new Color(204, 204, 225));
    jPanel5.setBorder(BorderFactory.createEtchedBorder());
    jPanel5.setBounds(new Rectangle(566, 35, 177, 231));
    jPanel5.setLayout(null);
    whiteBkgBlueCharLabel18.setText("<html><body>*Buyer Plan<br>Delivery</body></html>");
    whiteBkgBlueCharLabel18.setBounds(new Rectangle(4, 0, 78, 45));
    whiteBkgBlueCharLabel18.setBackground(Color.lightGray);
    whiteBkgBlueCharLabel18.setForeground(Color.red);
    txtProdByrWdwFrom.setBounds(new Rectangle(102, 62, 66, 21));
    txtProdByrWdwFrom.setText("");
    whiteBkgBlueCharLabel19.setBounds(new Rectangle(4, 63, 78, 27));
    whiteBkgBlueCharLabel19.setBackground(new Color(143, 143, 188));
    whiteBkgBlueCharLabel19.setForeground(Color.black);
    whiteBkgBlueCharLabel19.setText("Window From");
    txtProdByrWdwTo.setText("");
    txtProdByrWdwTo.setBounds(new Rectangle(102, 90, 66, 21));
    blueBkgWhiteCharLabel22.setBackground(Color.white);
    blueBkgWhiteCharLabel22.setForeground(Color.black);
    blueBkgWhiteCharLabel22.setText("Window To");
    blueBkgWhiteCharLabel22.setBounds(new Rectangle(4, 86, 70, 28));
    cbxDiv.setBounds(new Rectangle(63, 36, 144, 23));
    whiteBkgBlueCharLabel2.setBounds(new Rectangle(2, 35, 61, 23));
    whiteBkgBlueCharLabel2.setForeground(Color.red);
    whiteBkgBlueCharLabel2.setText("*Division");
    whiteBkgBlueCharLabel20.setForeground(Color.red);
    whiteBkgBlueCharLabel20.setText("<html><body>*OffShore<br>Center</body></html>");
    whiteBkgBlueCharLabel20.setVerticalAlignment(SwingConstants.CENTER);
    whiteBkgBlueCharLabel20.setVerticalTextPosition(SwingConstants.CENTER);
    whiteBkgBlueCharLabel20.setBounds(new Rectangle(6, 39, 62, 43));
    cbxOffShrCntr.setBounds(new Rectangle(72, 48, 86, 20));
    cbxQcQnty.setBounds(new Rectangle(60, 12, 113, 24));
    cbxQcQnty.addItemListener(new PnlEditPPDHead_cbxCountry_itemAdapter(this));
    whiteBkgBlueCharLabel21.setBackground(new Color(143, 143, 188));
    whiteBkgBlueCharLabel21.setForeground(Color.black);
    whiteBkgBlueCharLabel21.setText("<html><body>QC<br>COUNTRY</body></html>");
    whiteBkgBlueCharLabel21.setBounds(new Rectangle(2, 5, 70, 45));
    whiteBkgBlueCharLabel4.setBounds(new Rectangle(15, 115, 62, 24));
    whiteBkgBlueCharLabel4.setText("Price Term");
    cbxScPrxTrm.setBounds(new Rectangle(83, 116, 88, 22));
    whiteBkgBlueCharLabel5.setBackground(new Color(143, 143, 188));
    whiteBkgBlueCharLabel5.setForeground(Color.black);
    whiteBkgBlueCharLabel5.setText("<html><body>Board<br>RNG</body></html>");
    whiteBkgBlueCharLabel5.setBounds(new Rectangle(8, 197, 45, 32));
    txtRange.setText("");
    txtRange.setBounds(new Rectangle(63, 202, 117, 21));
    txtGrpName.setText("");
    txtGrpName.setBounds(new Rectangle(62, 151, 117, 21));
    blueBkgWhiteCharLabel4.setBackground(Color.white);
    blueBkgWhiteCharLabel4.setForeground(Color.black);
    blueBkgWhiteCharLabel4.setText("<html><body>Group<br>Name</body></html>");
    blueBkgWhiteCharLabel4.setBounds(new Rectangle(7, 148, 44, 31));
    txtGroup.setBounds(new Rectangle(63, 106, 117, 21));
    txtGroup.setText("");
    whiteBkgBlueCharLabel3.setBounds(new Rectangle(10, 98, 43, 31));
    whiteBkgBlueCharLabel3.setBackground(new Color(143, 143, 188));
    whiteBkgBlueCharLabel3.setForeground(Color.black);
    whiteBkgBlueCharLabel3.setText("<html><body>Group<br>No</body></html>");
    whiteBkgBlueCharLabel7.setBounds(new Rectangle(2, 51, 46, 24));
    whiteBkgBlueCharLabel7.setText("CITY");
    cbxCity.setBounds(new Rectangle(60, 52, 113, 24));
    txtGspReq.setBounds(new Rectangle(102, 38, 66, 22));
    txtGspReq.setText("");
    whiteBkgBlueCharLabel10.setText("GSP RQ");
    whiteBkgBlueCharLabel10.setBounds(new Rectangle(4, 42, 47, 22));
    cbxBranches.setBounds(new Rectangle(45, 119, 128, 24));
    blueBkgWhiteCharLabel21.setBounds(new Rectangle(3, 114, 55, 31));
    blueBkgWhiteCharLabel21.setText("Branch");
    txtBuyerSCNO.setBounds(new Rectangle(45, 154, 128, 23));
    txtBuyerSCNO.setText("");
    whiteBkgBlueCharLabel23.setBounds(new Rectangle(3, 144, 40, 41));
    whiteBkgBlueCharLabel23.setText("<html><body>Buyer<br>S/C</body></html>");
    cbxSCDest.setBounds(new Rectangle(40, 147, 133, 20));
    cbxSCDest.setEditable(true);
    cbxTgtDest.setEditable(true);
    jLabel1.setRequestFocusEnabled(true);
    jLabel1.setText("Port :");
    jLabel1.setBounds(new Rectangle(5, 146, 38, 22));
    blueBkgWhiteCharLabel20.setRequestFocusEnabled(true);
    blueBkgWhiteCharLabel20.setText("<html><body>Buyer<br>Label</body></html>");
    blueBkgWhiteCharLabel20.setBounds(new Rectangle(2, 190, 41, 31));
    txtBuyerLabel.setText("");
    txtBuyerLabel.setBounds(new Rectangle(45, 196, 128, 23));
    jLabel2.setText("Destination:");
    jLabel2.setBounds(new Rectangle(6, 170, 78, 20));
    cbxTgtDest.setBounds(new Rectangle(6, 197, 167, 21));
    txtProtoNo.setBounds(new Rectangle(74, 305, 92, 24));
    txtProtoNo.setText("");
    blueBkgWhiteCharLabel9.setText("Prote No.");
    blueBkgWhiteCharLabel9.setBounds(new Rectangle(8, 305, 110, 24));
    subPnlLapDip.add(blueBkgWhiteCharLabel7, null);
    subPnlLapDip.add(txtLapDipFxyDate, null);
    subPnlLapDip.add(txtBulkTgtDate, null);
    subPnlLapDip.add(blueBkgWhiteCharLabel8, null);
    subPnlLapDip.add(txtLapDipRcvDate, null);
    subPnlLapDip.add(whiteBkgBlueCharLabel8, null);
    jPanel1.add(subPnlProto, null);
    subPnlProto.add(blueBkgWhiteCharLabel14, null);
    subPnlProto.add(txtPrtSpcRcv, null);
    subPnlProto.add(txtPrtEstmSnd, null);
    subPnlProto.add(whiteBkgBlueCharLabel13, null);
    subPnlProto.add(whiteBkgBlueCharLabel11, null);
    subPnlProto.add(txtPrtQltyDesc, null);
    subPnlProto.add(whiteBkgBlueCharLabel12, null);
    subPnlProto.add(txtPrtLayoutRcv, null);
    subPnlProto.add(txtPrtGnlRmk, null);
    subPnlProto.add(whiteBkgBlueCharLabel14, null);
    subPnlProto.add(cbxPrtQtaCtg, null);
    subPnlProto.add(blueBkgWhiteCharLabel13, null);
    subPnlProto.add(blueBkgWhiteCharLabel10, null);
    subPnlProto.add(txtPrtGauge, null);
    subPnlProto.add(txtPrtAvgWt, null);
    subPnlProto.add(blueBkgWhiteCharLabel15, null);
    subPnlProto.add(txtPrtPriceRmk, null);
    subPnlProto.add(blueBkgWhiteCharLabel11, null);
    subPnlProto.add(blueBkgWhiteCharLabel12, null);
    subPnlProto.add(txtPrtWstg, null);
    jPanel1.add(subPnlLockIn, null);
    subPnlLockIn.add(blueBkgWhiteCharLabel17, null);
    subPnlLockIn.add(blueBkgWhiteCharLabel16, null);
    subPnlLockIn.add(txtLkinDlvyDate, null);
    subPnlLockIn.add(txtLkinRmk, null);
    subPnlLockIn.add(blueBkgWhiteCharLabel19, null);
    subPnlLockIn.add(cbxLknDep, null);
    subPnlLockIn.add(slkLknMaker, null);
    subPnlLockIn.add(blueBkgWhiteCharLabel18, null);
    subPnlLockIn.add(whiteBkgBlueCharLabel16, null);
    subPnlLockIn.add(txtLkinDvn, null);
    subPnlLockIn.add(slkLknBuyer, null);
    subPnlLockIn.add(whiteBkgBlueCharLabel15, null);
    jPanel1.add(blueBkgWhiteCharLabel9, null);
    jPanel1.add(txtProtoNo, null);
    //java.util.List dataBoundGUIs=new java.util.ArrayList();
    this.add(jPanel1, BorderLayout.CENTER);
    jPanel2.add(blueBkgWhiteCharLabel1, null);
    jPanel2.add(cbxCenter, null);
    jPanel2.add(cbxDep, null);
    jPanel2.add(cbxManagers, null);
    jPanel2.add(cbxOffShrCntr, null);
    jPanel2.add(cbxSzn, null);
    jPanel2.add(txtYear, null);
    jPanel2.add(whiteBkgBlueCharLabel1, null);
    jPanel2.add(whiteBkgBlueCharLabel20, null);
    jPanel2.add(whiteBkgBlueCharLabel17, null);
    jPanel2.add(blueBkgWhiteCharLabel5, null);
    jPanel2.add(blueBkgWhiteCharLabel23, null);
    jPanel1.add(subPnlLapDip, null);
    jPanel1.add(btn2SelectMtrls, null);
    jPanel1.add(lblMtrList, null);
    jPanel1.add(whiteBkgBlueCharLabel6, null);
    jPanel1.add(lblDisplayProdheadPK, null);
    jPanel1.add(blueBkgWhiteCharLabel3, null);
    jPanel1.add(jPanel3, null);
    jPanel3.add(blueBkgWhiteCharLabel2, null);
    jPanel3.add(slkHeadBuyer, null);
    jPanel3.add(whiteBkgBlueCharLabel2, null);
    jPanel3.add(cbxDiv, null);
    jPanel3.add(blueBkgWhiteCharLabel6, null);
    jPanel3.add(slkHeadMaker, null);
    jPanel3.add(txtGroup, null);
    jPanel3.add(whiteBkgBlueCharLabel3, null);
    jPanel3.add(whiteBkgBlueCharLabel5, null);
    jPanel3.add(txtRange, null);
    jPanel3.add(blueBkgWhiteCharLabel4, null);
    jPanel3.add(txtGrpName, null);
    jPanel1.add(jPanel4, null);
    jPanel1.add(jPanel5, null);
    jPanel5.add(txtProdByrPlnDlvy, null);
    jPanel5.add(txtGspReq, null);
    jPanel5.add(txtProdByrWdwFrom, null);
    jPanel5.add(txtProdByrWdwTo, null);
    jPanel5.add(whiteBkgBlueCharLabel10, null);
    jPanel5.add(whiteBkgBlueCharLabel19, null);
    jPanel5.add(blueBkgWhiteCharLabel22, null);
    jPanel5.add(whiteBkgBlueCharLabel18, null);
    jPanel5.add(cbxScPrxTrm, null);
    jPanel5.add(jLabel1, null);
    jPanel5.add(jLabel2, null);
    jPanel5.add(cbxTgtDest, null);
    jPanel5.add(cbxSCDest, null);
    jPanel5.add(whiteBkgBlueCharLabel4, null);
    jPanel1.add(jPanel2, null);
    jPanel4.add(whiteBkgBlueCharLabel21, null);
    jPanel4.add(cbxQcQnty, null);
    jPanel4.add(whiteBkgBlueCharLabel7, null);
    jPanel4.add(cbxCity, null);
    jPanel4.add(whiteBkgBlueCharLabel9, null);
    jPanel4.add(cbxProductionType, null);
    jPanel4.add(blueBkgWhiteCharLabel21, null);
    jPanel4.add(cbxBranches, null);
    jPanel4.add(txtBuyerSCNO, null);
    jPanel4.add(blueBkgWhiteCharLabel20, null);
    jPanel4.add(whiteBkgBlueCharLabel23, null);
    jPanel4.add(txtBuyerLabel, null);
    cbxDiv.addItemListener(new PnlEditPPDHead_cbxDiv_itemAdapter(this));
    isGrayied=false;
  }
  void txtProdByrPlnDlvy_focusLost(FocusEvent e) {
    if(buyerPlanDlvDbCheck.isValid()){
      Object valueObj=buyerPlanDlvDbCheck.getSelectedValue();
      if(valueObj!=null){
        java.util.Date date=(java.util.Date)valueObj;
        long value2Minus=105L;
        value2Minus*=24;
        value2Minus*=3600;
        value2Minus*=1000;
        java.sql.Date dateGspRq=new java.sql.Date(date.getTime()-value2Minus);
        exgui.Object2String cnv=(exgui.Object2String)exgui.verification.CellFormat.getDateStringFormaterAllowNull();
        txtGspReq.setText(cnv.Obj2String(dateGspRq));
      }
    }else{
    }
  }
  public void setDestinationRecords(Vector vctDest){recDests =vctDest;}
  public void setBranchesRecords(Vector vctBranch){branches=vctBranch;}
  //once the maker changed ,set country & city to co-responding country -city
  public class ChangeBuyerHandler
      implements newtimes.preproduction.buyermakerselect.BuyerMakerChanged{
    public void changeBuyerMaker(Record buyerRecord){
      //recompose the division combobox of buyer.
      if(isProcessingData2Gui)return;
      try{
        //find out the vector to add dbDeps.
        if (buyerRecord==null) {
          //only the all dep is allow to add now.
          dbCbxdiv=new exgui.DataBindJCombobox(
              cbxDiv,
              "PROD_BUYER_DIVISION",
              new Vector(),
              "DIV_NAME","DIV_CODE",
              recToMapping.get("PROD_BUYER_DIVISION"),"N/A",null);
          cbxDiv.setUI(new exgui.WideComboBoxUI(160));
          if(dbCbxDivIndex == dataBoundGUIs.size()) {
            dataBoundGUIs.add(dbCbxdiv);
          }else{
            //just replace after display & change;
            dataBoundGUIs.set(dbCbxDivIndex,dbCbxdiv);
          }
        }else {
          //deps and "ALL"dep allow to add.
          Vector dvsnRecords=
              (Vector)tempProperties.tmpHMap_BuyerDivison.get(
              buyerRecord.get(0).toString());
           dbCbxdiv=null;
          if(dvsnRecords==null){
            dbCbxdiv=new exgui.DataBindJCombobox(
                cbxDiv,
                "PROD_BUYER_DIVISION",
                new Vector(),
                "DIV_NAME",
                "DIV_CODE",
                recToMapping.get("PROD_BUYER_DIVISION"),"N/A",null);
            cbxDiv.setUI(new exgui.WideComboBoxUI(160));
          }else {
            dbCbxdiv=new exgui.DataBindJCombobox(
                cbxDiv,
                "PROD_BUYER_DIVISION",
                dvsnRecords,
                "DIV_NAME",
                "DIV_CODE",
                recToMapping.get("PROD_BUYER_DIVISION"),"N/A",null);
            cbxDiv.setUI(new exgui.WideComboBoxUI(160));
          }

          if (dbCbxDivIndex == dataBoundGUIs.size()) {
            dataBoundGUIs.add(dbCbxdiv);
          }else{
            dataBoundGUIs.set(dbCbxDivIndex,dbCbxdiv);
          }
        }

      }catch(Exception exp){
        exp.printStackTrace();
      }
      if(buyerRecord==null)return;
      String checkDivFlag=(String)buyerRecord.get(4);
      needtoCheckDiv=false;
      if(checkDivFlag!=null){
        if(checkDivFlag.trim().equalsIgnoreCase("Y")){
          needtoCheckDiv=true;
          return;
        }
      }
    }
  }

  public void changeBuyerMaker(Record buyerMkerRecord){
     String mkrCountry=null,mkrCity=null;
    if(buyerMkerRecord!=null){
       mkrCountry=(String)buyerMkerRecord.get(2);
       mkrCity=(String)buyerMkerRecord.get(3);
    }
    Vector recCountry=newtimes.preproduction.guis.tempProperties.tmpCountries;
    if(mkrCountry!=null){
      for (int i = 0; i < recCountry.size(); i++) {
        Record rectmp = (Record) recCountry.get(i);
        Object cntyCode = rectmp.get(0);
        if (util.MiscFunc.isEqual(mkrCountry, cntyCode)) {
          //cbxCountry.setSelectedIndex(i + 1);
          cbxQcQnty.setSelectedIndex(i + 1);
          //System.out.println("Matched,index is:"+i);
          break;
        }
      }
    }else{
      //cbxCountry.setSelectedIndex(0);
      cbxQcQnty.setSelectedIndex(0);
    }
    try{

     recToMapping.set("PROD_CITY_NAME",mkrCity);
     //if(!isInitializingCountriesCbx){
       //the last object is databinded combobox of city list
       dataBoundGUIs.remove(dataBoundGUIs.size()-1);
       dataBoundGUIs.add(
          getCityComboboxByCountry(
            cbxQcQnty.getSelectedItem(),
            cbxCity,recToMapping
          )
       );
     //}
     //System.out.println("after adjust city");

    }catch(Exception exp){
      exp.printStackTrace();
    }

  }
  void cbxCenter_itemStateChanged(ItemEvent e) {
    if(isProcessingData2Gui)return;
    try{
      //find out the vector to add dbDeps.
      if (dbCBX_Center.getSelectedValue()==null) {
        //only the all dep is allow to add now.
         dbCBX_Dep =
            new exgui.DataBindJCombobox(
            cbxDep,"PROD_DEPTMENT",
            new Vector(),
            "DEP_NAME", "DEP_CODE",
            (String)recToMapping.get("PROD_DEPTMENT"),
            "ALL", null);
        if(dbCbxDepIndex == super.dataBoundGUIs.size()) {
          super.dataBoundGUIs.add(dbCBX_Dep);
        }else{
          //just replace after display & change;
          dataBoundGUIs.set(dbCbxDepIndex,dbCBX_Dep);
        }
      }else {
        //deps and "ALL"dep allow to add.
        Vector depVects=
            (Vector)tempProperties.tmpH_tbl_CenterDepMap.get(
            dbCBX_Center.getSelectedValue());
         dbCBX_Dep=null;
        if(depVects==null){
          dbCBX_Dep =
             new exgui.DataBindJCombobox(
             cbxDep, "PROD_DEPTMENT",
             new Vector(),
             "DEP_NAME", "DEP_CODE",
             (String)recToMapping.get("PROD_DEPTMENT"),
             "ALL", null);
        }else if(depVects.size()>1){
           dbCBX_Dep =
              new exgui.DataBindJCombobox(
              cbxDep, "PROD_DEPTMENT",
              depVects,
              "DEP_NAME", "DEP_CODE",
              recToMapping.get("PROD_DEPTMENT"),
              "ALL", null);
          //guis.add(DbJcbxcbxDep);
        }else{
          dbCBX_Dep =
              new exgui.DataBindJCombobox(
              cbxDep, "PROD_DEPTMENT",
              depVects,
              "DEP_NAME", "DEP_CODE",
              recToMapping.get("PROD_DEPTMENT"));
          //guis.add(DbJcbxcbxDep);
        }

        if (dbCbxDepIndex == dataBoundGUIs.size()) {
          dataBoundGUIs.add(dbCBX_Dep);
        }else{
          dataBoundGUIs.set(dbCbxDepIndex,dbCBX_Dep);
        }
      }

    }catch(Exception exp){
      exp.printStackTrace();
    }
  }
  void cbxDiv_itemStateChanged(ItemEvent e){
    //if add new,set to default value of txtBuyerLable as div code.
    if(isProcessingPast)return;
    if(recToMapping.getInt(0) < 1){
      if(dbCbxdiv==null)return;
      Object divObj=dbCbxdiv.getSelectedValue();
      txtBuyerLabel.setText((divObj==null)?"":divObj.toString());
    }
  }
  void cbxCountry_itemStateChanged(ItemEvent e) {
  try{
     if(!isInitializingCountriesCbx){
       //the last object is databinded combobox of city list
       dataBoundGUIs.remove(dataBoundGUIs.size()-1);
       dataBoundGUIs.add(
          getCityComboboxByCountry(
            cbxQcQnty.getSelectedItem(),
            cbxCity,recToMapping
          )
       );
     }
    }catch(Exception exp){
      exp.printStackTrace();
    }

  }

/*
  columns are from the sql:
  select a.PROD_CEN_CODE,a.PROD_SEASON,a.PROD_DEPTMENT,a.PROD_YEAR,a.PROD_BUYER,
  a.PROD_BUYER_DIVISION,a.PROD_MAKER,a.PROD_GROUP,a.PROD_GROUP_NAME,a.PROD_RANGE
  ,b.*,c.MTR_V_PREPROD_MTRDTL_PK,d.MTRDTL_MTR_NO
  from prod_head a,preprod b,mtr_v_preprod c,material_detail d
  where  a.PROD_HEAD_PK=b.PREPROD_PROD_PK and c.MTR_V_PREPROD_PK =b.PREPROD_PROD_PK and c.MTR_V_PREPROD_MTRDTL_PK=d.MTRDTL_BYMKR_SEQ
 */


  public void record2Gui(){
    try{
      //comboboxes
      //these data should be prepared at the query interface
      java.util.Vector centRecords=tempProperties.tmpCenters;
      java.util.Vector dptRecords=tempProperties.tmpDepartment;
      java.util.Vector dvsnRecords=tempProperties.tmpDivision;
      java.util.Vector sznRecords=tempProperties.tmpSeason;
      java.util.Vector qtaRecords=tempProperties.tmpQtaCtg;
      java.util.Vector tmepRecordsOfProdType=tempProperties.tmpProdType;
      if(!isProcessingPast){
        if (recToMapping.getInt(0) < 1) {
          respondingMTR_V_Records = new Vector();
          whiteBkgBlueCharLabel6.setText("PRODUCTION HEAD ADD");
        }
        else {
          String titleText="PRODUCTION HEAD EDIT ,AUDIT STATUS:";
          titleText+=newtimes.preproduction.Constants.getAuditStatusName(
                 recToMapping.getInt("PRODUCTION_AUDIT_STATUS"));
          String cnfmManager=(String)recToMapping.get("prod_cnfm_mgr_name");
          if(cnfmManager!=null){
            titleText+="  MANAGER:";
            titleText+=cnfmManager;
          }
          String PROD_SC_NO=(String)recToMapping.get("PROD_SC_NO");
          if(PROD_SC_NO!=null){
            titleText+=" S/C No.:";
            titleText+=PROD_SC_NO;
          }

          respondingMTR_V_Records =
              myDbHander.getCorespondingMtrlDtlRecords(recToMapping.getInt(0));
          newtimes.preproduction.Constants.PREPROD_USING_MTRL_DTLS =
                            respondingMTR_V_Records;
           whiteBkgBlueCharLabel6.setText(titleText);
           lblDisplayProdheadPK.setText(recToMapping.get(0).toString());
        }
      }
      isProcessingData2Gui=true;
      mappingListMtrlNo();
      dataBoundGUIs.clear();
    dbCBX_Center= new exgui.DataBindJCombobox(
          cbxCenter,"PROD_CEN_CODE",
          centRecords,"CEN_NAME",
          "CEN_CODE",
          recToMapping.get("PROD_CEN_CODE"));
    dataBoundGUIs.add(dbCBX_Center);
    dbCbxDepIndex=dataBoundGUIs.size();
    dbCBX_Dep = new exgui.DataBindJCombobox(
          cbxDep,
          "PROD_DEPTMENT",
          dptRecords,
          "DEP_NAME",
          "DEP_CODE",
          recToMapping.get("PROD_DEPTMENT"));
     dataBoundGUIs.add(dbCBX_Dep);
     dataBoundGUIs.add(
        new exgui.DataBindJCombobox(cbxLknDep, "PREPROD_LOCKIN_DEPARTMENT", dptRecords,
                                "DEP_NAME", "DEP_CODE",
                                recToMapping.get("PREPROD_LOCKIN_DEPARTMENT"))
      );

     dbCbxDivIndex=dataBoundGUIs.size();
     //design buyerMaker Division
     Object buyerSeq=recToMapping.get("PROD_BUYER");
     if(buyerSeq==null){
       dvsnRecords=new Vector();
     }else{
       dvsnRecords=
           (Vector)tempProperties.tmpHMap_BuyerDivison.get(buyerSeq.toString());
       if(dvsnRecords==null) dvsnRecords=new Vector();
     }
     dbCbxdiv=new exgui.DataBindJCombobox(
          cbxDiv,
          "PROD_BUYER_DIVISION",
          dvsnRecords,
          "DIV_NAME",
          "DIV_CODE",
          recToMapping.get("PROD_BUYER_DIVISION"),"N/A",null);
     cbxDiv.setUI(new exgui.WideComboBoxUI(160));
     dataBoundGUIs.add(dbCbxdiv);

      java.util.Vector recPrxTerm=newtimes.preproduction.guis.tempProperties.tmpPriceTerm;
      exgui.DataBindJCombobox DbJcbxjcbxScPrxTerm= new exgui.DataBindJCombobox(
          cbxScPrxTrm, "PROduction_SC_PRC_TRM", recPrxTerm, "PRC_TRM",
          "PRC_TRM", recToMapping.get("PRODuction_SC_PRC_TRM"),"",null);
      dataBoundGUIs.add(DbJcbxjcbxScPrxTerm);

      dbCbxSzn= new exgui.DataBindJCombobox(cbxSzn,
                    "PROD_SEASON",
                    sznRecords,
                    "SEA_NAME","SEA_NAME",
                    recToMapping.get("PROD_SEASON"));

     dataBoundGUIs.add(dbCbxSzn);

     dataBoundGUIs.add(
        new exgui.DataBindJCombobox(
          cbxPrtQtaCtg,"PREPROD_PROTO_QUOTA_CAT",
          qtaRecords,"QTA_CAT","QTA_CAT",
          recToMapping.get("PREPROD_PROTO_QUOTA_CAT"))
     );

     if(recToMapping.get("PROD_MNG_CODE")==null){
       dataBoundGUIs.add(
         new exgui.DataBindJCombobox(cbxManagers,
                                    "PROD_MNG_CODE",
                                    tempProperties.tmpManagerRecs,
                                    "MNG_ABBR", "MNG_CODE",
                                    util.PublicVariable.USER_RECORD.get("USR_MNG_CODE_DF"),
                                    "None Manager","None Manager"
                                    )
       );
     }else{
         dataBoundGUIs.add(
             new exgui.DataBindJCombobox(cbxManagers,
                                         "PROD_MNG_CODE",
                                         tempProperties.tmpManagerRecs,
                                         "MNG_ABBR", "MNG_CODE",
                                         recToMapping.get("PROD_MNG_CODE"),
                                         "None Manager","None Manager")
             );
     }




      dataBoundGUIs.add(
        new exgui.DataBindJCombobox(cbxOffShrCntr,
                                    "PROD_OFFSHORE_CENTER",
                                    tempProperties.tmpOffShores,
                                    "CEN_NAME","CEN_CODE",
                                    recToMapping.get("PROD_OFFSHORE_CENTER"))
      );

    //buyer maker selection objects
      slkHeadBuyer.init("PROD_BUYER",recToMapping.get("PROD_BUYER"),slkHeadBuyer.TYPE_BUYER,false);
      dataBoundGUIs.add(slkHeadBuyer);

      Object initMkrSeq=recToMapping.get("PROD_MAKER");
      slkHeadMaker.init("PROD_MAKER",initMkrSeq,slkHeadBuyer.TYPE_MAKER,false);
      dataBoundGUIs.add(slkHeadMaker);


      slkLknBuyer.init("PREPROD_LOCKIN_BUYER",recToMapping.get("PREPROD_LOCKIN_BUYER"),slkLknBuyer.TYPE_BUYER,true);
      dataBoundGUIs.add(slkLknBuyer);
      slkLknMaker.init("PREPROD_LOCKIN_FACTORY",recToMapping.get("PREPROD_LOCKIN_FACTORY"),slkLknBuyer.TYPE_MAKER,true);
      dataBoundGUIs.add(slkLknMaker);

    //text areas.
  Object vftxtGroup = exgui.verification.CellFormat.getOrdinaryField(40);
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtGroup,
      "PROD_GROUP", recToMapping.get("PROD_GROUP"), 40,
      (exgui.Object2String) vftxtGroup,
                    (exgui.ultratable.CellTxtEditorFormat) vftxtGroup)
                    );
  Object vftxtYear = exgui.verification.CellFormat.getOrdinaryFieldNotAllowNull(4);
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtYear, "PROD_YEAR",
      recToMapping.get("PROD_YEAR"), 4, (exgui.Object2String) vftxtYear,
      (exgui.ultratable.CellTxtEditorFormat) vftxtYear)
                    );
  Object vftxtGrpName = exgui.verification.CellFormat.getOrdinaryField(60);
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtGrpName,
      "PROD_GROUP_NAME", recToMapping.get("PROD_GROUP_NAME"), 60,
      (exgui.Object2String) vftxtGrpName,
                    (exgui.ultratable.CellTxtEditorFormat) vftxtGrpName)
                    );
  Object vftxtRange = exgui.verification.CellFormat.getOrdinaryField(40);
dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtRange,
    "PROD_RANGE", recToMapping.get("PROD_RANGE"), 40,
    (exgui.Object2String) vftxtRange,
                  (exgui.ultratable.CellTxtEditorFormat) vftxtRange)
                  );


  Object vftxtPrtPriceRmk = exgui.verification.CellFormat.getOrdinaryField(
      200);
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtPrtPriceRmk,
      "PREPROD_PROTO_PRICE_REMARK",
                    recToMapping.get("PREPROD_PROTO_PRICE_REMARK"), 200,
                                      (exgui.Object2String)
                                      vftxtPrtPriceRmk,
                                      (exgui.ultratable.CellTxtEditorFormat)
                                      vftxtPrtPriceRmk)
                    );
  Object vftxtPrtGauge = exgui.verification.CellFormat.getOrdinaryField(10);
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtPrtGauge,
      "PREPROD_PROTO_GAUGE", recToMapping.get("PREPROD_PROTO_GAUGE"), 10,
      (exgui.Object2String) vftxtPrtGauge,
                    (exgui.ultratable.CellTxtEditorFormat) vftxtPrtGauge)
                    );
  Object vftxtPrtSpcRcv = exgui.verification.CellFormat.
      getDateStringFormaterAllowNull();
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtPrtSpcRcv,
      "PREPROD_PROTO_SPEC_RCVD", recToMapping.get("PREPROD_PROTO_SPEC_RCVD"),
      10, (exgui.Object2String) vftxtPrtSpcRcv,
                    (exgui.ultratable.CellTxtEditorFormat) vftxtPrtSpcRcv)
                    );
  Object vftxtPrtGnlRmk = exgui.verification.CellFormat.getOrdinaryField(
      200);
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtPrtGnlRmk,
      "PREPROD_PROTO_GEN_REMARKS",
                    recToMapping.get("PREPROD_PROTO_GEN_REMARKS"), 200,
                                       (exgui.Object2String) vftxtPrtGnlRmk,
                                       (exgui.ultratable.
                                        CellTxtEditorFormat) vftxtPrtGnlRmk)
                    );
  Object vftxtPrtEstmSnd = exgui.verification.CellFormat.
      getDateStringFormaterAllowNull();
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtPrtEstmSnd,
      "PREPROD_PROTO_ESTIMATE_SEND",
                    recToMapping.get("PREPROD_PROTO_ESTIMATE_SEND"), 10,
                                     (exgui.Object2String) vftxtPrtEstmSnd,
                                     (exgui.ultratable.CellTxtEditorFormat)
                                     vftxtPrtEstmSnd)
                    );
  Object vftxtPrtQltyDesc = exgui.verification.CellFormat.getOrdinaryField(
      200);
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtPrtQltyDesc,
      "PREPROD_PROTO_QUALITY_DESC",
                    recToMapping.get("PREPROD_PROTO_QUALITY_DESC"), 200,
                                      (exgui.Object2String)
                                      vftxtPrtQltyDesc,
                                      (exgui.ultratable.CellTxtEditorFormat)
                                      vftxtPrtQltyDesc)
                    );
  Object vftxtProtoNo = exgui.verification.CellFormat.getOrdinaryField(30);
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtProtoNo,
      "PREPROD_PROTO_NO", recToMapping.get("PREPROD_PROTO_NO"), 30,
      (exgui.Object2String) vftxtProtoNo,
                    (exgui.ultratable.CellTxtEditorFormat) vftxtProtoNo)
                    );
  Object vftxtPrtLayoutRcv = exgui.verification.CellFormat.
      getDateStringFormaterAllowNull();
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtPrtLayoutRcv,
      "PREPROD_PROTO_LAYOUT_RCVD",
                    recToMapping.get("PREPROD_PROTO_LAYOUT_RCVD"), 10,
                                       (exgui.Object2String)
                                       vftxtPrtLayoutRcv,
                                       (exgui.ultratable.CellTxtEditorFormat)
                                       vftxtPrtLayoutRcv)
                    );
  Object vftxtPrtWstg = exgui.verification.CellFormat.
      getDoubleFormatAllowNull(3, 2);
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtPrtWstg,
      "PREPROD_PROTO_WASTAGE", recToMapping.get("PREPROD_PROTO_WASTAGE"), 6,
      (exgui.Object2String) vftxtPrtWstg,
                    (exgui.ultratable.CellTxtEditorFormat) vftxtPrtWstg)
                    );
  Object vftxtPrtAvgWt = exgui.verification.CellFormat.
      getDoubleFormatAllowNull(3, 2);
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtPrtAvgWt,
      "PREPROD_PROTO_AVG_WEIGHT",
                    recToMapping.get("PREPROD_PROTO_AVG_WEIGHT"), 6,
                                        (exgui.Object2String) vftxtPrtAvgWt,
                                        (exgui.ultratable.
                                         CellTxtEditorFormat) vftxtPrtAvgWt)
                    );
  Object vftxtLkinDlvyDate = exgui.verification.CellFormat.
      getDateStringFormaterAllowNull();
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtLkinDlvyDate,
      "PREPROD_LOCKIN_DELIVERY", recToMapping.get("PREPROD_LOCKIN_DELIVERY"),
      10, (exgui.Object2String) vftxtLkinDlvyDate,
                    (exgui.ultratable.CellTxtEditorFormat)
                        vftxtLkinDlvyDate)
                    );

  Object vftxtLkinRmk = exgui.verification.CellFormat.getOrdinaryField(200);
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtLkinRmk,
      "PREPROD_LOCKIN_REMARKS", recToMapping.get("PREPROD_LOCKIN_REMARKS"),
      200, (exgui.Object2String) vftxtLkinRmk,
                    (exgui.ultratable.CellTxtEditorFormat) vftxtLkinRmk)
                    );
  Object vftxtLkinDvn = exgui.verification.CellFormat.getOrdinaryField(5);
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtLkinDvn,
      "PREPROD_LOCKIN_BUYER_DIVISION",
                    recToMapping.get("PREPROD_LOCKIN_BUYER_DIVISION"), 5,
                                   (exgui.Object2String) vftxtLkinDvn,
                                   (exgui.ultratable.CellTxtEditorFormat)
                                   vftxtLkinDvn)
                    );
  Object vftxtBulkTgtDate = exgui.verification.CellFormat.
      getDateStringFormaterAllowNull();
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtBulkTgtDate,
      "PREPROD_LABDIP_BULK_TARGET",
                    recToMapping.get("PREPROD_LABDIP_BULK_TARGET"), 10,
                                      (exgui.Object2String)
                                      vftxtBulkTgtDate,
                                      (exgui.ultratable.CellTxtEditorFormat)
                                      vftxtBulkTgtDate)
                    );
  Object vftxtLapDipFxyDate = exgui.verification.CellFormat.
      getDateStringFormaterAllowNull();
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtLapDipFxyDate,
      "PREPROD_LABDIP_STD_TO_FTY",
                    recToMapping.get("PREPROD_LABDIP_STD_TO_FTY"), 10,
                                       (exgui.Object2String)
                                       vftxtLapDipFxyDate,
                                       (exgui.ultratable.
                                        CellTxtEditorFormat)
                                       vftxtLapDipFxyDate)
                    );
  Object vftxtLapDipRcvDate = exgui.verification.CellFormat.
      getDateStringFormaterAllowNull();
  dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtLapDipRcvDate,
      "PREPROD_LABDIP_STD_RCVD", recToMapping.get("PREPROD_LABDIP_STD_RCVD"),
      10, (exgui.Object2String) vftxtLapDipRcvDate,
                    (exgui.ultratable.CellTxtEditorFormat)
                       vftxtLapDipRcvDate)
                    );

  /*
  Object vftxtProdByrPlnRmk=exgui.verification.CellFormat.getOrdinaryField(200);
   dataBoundGUIs.add(  new exgui.DataBindTextWithChecker(txtProdByrPlnRmk,"PRODUCTION_BYR_PLAN_REMK",recToMapping.get("PRODUCTION_BYR_PLAN_REMK"),200,(exgui.Object2String)vftxtProdByrPlnRmk,(exgui.ultratable.CellTxtEditorFormat)vftxtProdByrPlnRmk)
  );*/
      Object vftxtBuyerLabel = exgui.verification.CellFormat.getOrdinaryField(
        50);
    dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtBuyerLabel,
        "PRODUCTION_LABEL", recToMapping.get("PRODUCTION_LABEL"), 50,
        (exgui.Object2String) vftxtBuyerLabel,
                      (exgui.ultratable.CellTxtEditorFormat) vftxtBuyerLabel)
                      );
    /*
     dataBoundGUIs.add(new exgui.DataBindJCombobox(
            cbxSCDest, "PRODUCTION_SC_DEST", recDests, "Dest_name",
            "dest_name", recToMapping.get("PRODUCTION_SC_DEST"),"",null));

  //limit the length;

        exgui.DataBindText txtDestLen=
        new exgui.DataBindText
        ((javax.swing.text.JTextComponent)cbxSCDest.getEditor().getEditorComponent(),"",
        recToMapping.get("PRODUCTION_SC_DEST"),20);
      */
     dataBoundGUIs.add(new exgui.DataBindEditableJCombobox(
            cbxSCDest, "PRODUCTION_SC_DEST", recDests, "Dest_name",
            "dest_name", recToMapping.get("PRODUCTION_SC_DEST"),"",null,20));

  dataBoundGUIs.add(new exgui.DataBindEditableJCombobox(
              cbxTgtDest, "PRODUCTION_TGT_DEST", recDests, "Dest_name",
              "dest_name", recToMapping.get("PRODUCTION_TGT_DEST"),"",null,20));



   exgui.DataBindJCombobox DbJcbxjcbxBranches= new exgui.DataBindJCombobox(
       cbxBranches, "PRODUCTION_BRNCH_BRIEF", branches, "BRNCH_BRIEF",
       "BRNCH_BRIEF", recToMapping.get("PRODUCTION_BRNCH_BRIEF"),"N/A",null);
   dataBoundGUIs.add(DbJcbxjcbxBranches);

   Object vftxtSCHeadRmk = exgui.verification.CellFormat.getOrdinaryField(
       15);
   dataBoundGUIs.add(new exgui.DataBindTextWithChecker(txtBuyerSCNO,
       "PRODUCTION_BYR_SC_NO", recToMapping.get("PRODUCTION_BYR_SC_NO"), 15,
       (exgui.Object2String) vftxtSCHeadRmk,
                     (exgui.ultratable.CellTxtEditorFormat) vftxtSCHeadRmk)
                     );



   //note!! GsReq field is automatically  caculated as txtProdByrPlnDlvy-150 days.
   Object vftxtProdByrPlnDlvy=new BuyerPlanDelvChk();//exgui.verification.CellFormat.getDateStringFormater();
   buyerPlanDlvDbCheck= new exgui.DataBindTextWithChecker(txtProdByrPlnDlvy,
       "PRODUCTION_BYR_PLAN_DEL",
       recToMapping.get("PRODUCTION_BYR_PLAN_DEL"),
       10,(exgui.Object2String)vftxtProdByrPlnDlvy,
       (exgui.ultratable.CellTxtEditorFormat)vftxtProdByrPlnDlvy);
   dataBoundGUIs.add(buyerPlanDlvDbCheck);


  Object vftxtProdByrWdwTo=exgui.verification.CellFormat.getDateStringFormaterAllowNull();
   dataBoundGUIs.add(  new exgui.DataBindTextWithChecker(txtProdByrWdwTo,
       "PRODUCTION_BYR_WINDOW_TO",
       recToMapping.get("PRODUCTION_BYR_WINDOW_TO"),
       10,(exgui.Object2String)vftxtProdByrWdwTo,
       (exgui.ultratable.CellTxtEditorFormat)vftxtProdByrWdwTo)
  );

  Object vftxtProdByrWdwFrom=exgui.verification.CellFormat.getDateStringFormaterAllowNull();
   dataBoundGUIs.add(
          new exgui.DataBindTextWithChecker(
          txtProdByrWdwFrom,"PRODUCTION_BYR_WINDOW_FM",
          recToMapping.get("PRODUCTION_BYR_WINDOW_FM"),10,(exgui.Object2String)vftxtProdByrWdwFrom,(exgui.ultratable.CellTxtEditorFormat)vftxtProdByrWdwFrom)
  );

      Object vftxtGspReq=exgui.verification.CellFormat.getDateStringFormaterAllowNull();
       dataBoundGUIs.add(
          new exgui.DataBindTextWithChecker(txtGspReq,"PRODUCTION_RQ",recToMapping.get("PRODUCTION_RQ"),10,(exgui.Object2String)vftxtGspReq,(exgui.ultratable.CellTxtEditorFormat)vftxtGspReq)
      );
     dbCbxProdType=
         new exgui.DataBindJCombobox(cbxProductionType,
                                     "PRODUCTION_TYPE",
                                     tmepRecordsOfProdType,
                                     "TYPE_NAME",
                                     "TYPE_CODE",
                                     recToMapping.get("PRODUCTION_TYPE"));
     dataBoundGUIs.add(dbCbxProdType);

   //make the countries and cities related combobox.
      isInitializingCountriesCbx=true;
      /*
       cbxCountry.removeAllItems();
       exgui.DataBindJCombobox DbJcbxcbxCountry =
           new exgui.DataBindJCombobox(cbxCountry,
                                       "PROD_CNTY_CODE",
                                       tempProperties.tmpCountries,
                                       "CNTY_NAME","CNTY_NAME",
                                       recToMapping.get("PROD_CNTY_CODE"),"NONE",null);
       dataBoundGUIs.add(DbJcbxcbxCountry);
      */
       DbJcbxcbxQcCountry =
           new exgui.DataBindJCombobox(cbxQcQnty,
                                       "PRODUCTION_QC_CNTY",
                                       tempProperties.tmpCountries,
                                       "CNTY_NAME","CNTY_NAME",
                                       recToMapping.get("PRODUCTION_QC_CNTY"),"NONE",null);
       dataBoundGUIs.add(DbJcbxcbxQcCountry);


       isInitializingCountriesCbx=false;
       dataBoundGUIs.add(
           getCityComboboxByCountry(
             DbJcbxcbxQcCountry.getSelectedValue(),
             cbxCity,recToMapping
            )
          );

    //begin to collect the columns allow to future copy...
    if(recordColumnsToCopy==null){
      recordColumnsToCopy=new String[dataBoundGUIs.size()];
      for (int i = 0; i < dataBoundGUIs.size(); i++) {
       recordColumnsToCopy[i]=((exgui.DataBindGUIObject)dataBoundGUIs.get(i)).getOrgRecField();
      }
    }



    Object prodStatusObj=
        recToMapping.get("PRODUCTION_AUDIT_STATUS");
    if(prodStatusObj!=null){
      int auditStatusCode=recToMapping.getInt("PRODUCTION_AUDIT_STATUS");
      if(auditStatusCode==
        newtimesejb.preproduction.PreProductionHead.AUDIT_STATUS_CONFIRMED||
        auditStatusCode==
        newtimesejb.preproduction.PreProductionHead.AUDIT_STATUS_PRINTED){
       slkHeadBuyer.setEnabled(false);
       slkHeadMaker.setEnabled(false);
       cbxScPrxTrm.setEnabled(false);
       cbxScPrxTrm.setEditable(false);
       cbxScPrxTrm.setFocusable(false);
     }
    }
    }catch(Exception e){
      e.printStackTrace();
    }
    isGrayied=false;
    isProcessingData2Gui=false;
    cbxCenter.getItemListeners()[0].itemStateChanged(null);
    //cbxCountry_itemStateChanged(null);
  }

  public class BuyerPlanDelvChk
     implements exgui.ultratable.CellTxtEditorFormat,exgui.Object2String{
     Object dateVfy=exgui.verification.CellFormat.getDateStringFormater();
     Object buyPlanBgn=
         newtimes.preproduction.Constants.SYSTEM_DEFAULT_RECORD.get(16);//plan_del_bgn of system_default_value
     Object buyPlanEnd=
         newtimes.preproduction.Constants.SYSTEM_DEFAULT_RECORD.get(17);//plan_del_bgn of system_default_value
    String prompt4Invailid;
    java.text.DateFormat df=
        new java.text.SimpleDateFormat("yyyy/MM/dd");
    public BuyerPlanDelvChk(){
      //System.out.println("buyPlanBgn class is "+buyPlanBgn.getClass().getName());
      df.setLenient(false);
      if(buyPlanBgn!=null && buyPlanEnd==null){
        prompt4Invailid="String format is yyyy/mm/dd and after "+
            df.format((java.sql.Timestamp)buyPlanBgn);
        return;
      }
      if(buyPlanBgn==null && buyPlanEnd!=null){
        prompt4Invailid="String format is yyyy/mm/dd and before "+
            df.format((java.sql.Timestamp)buyPlanEnd);
        return;
      }
      if(buyPlanBgn!=null && buyPlanEnd!=null){
        prompt4Invailid="String format is yyyy/mm/dd and between "+
            df.format((java.sql.Timestamp)buyPlanBgn)+"~"+df.format((java.sql.Timestamp)buyPlanEnd);
        return;
      }
      prompt4Invailid="String format is yyyy/mm/dd";
    }
    public exgui.ultratable.KeyProcess getKeyListener(){
      return ((exgui.ultratable.CellTxtEditorFormat)dateVfy).getKeyListener();
    }
    public String Obj2String(Object vluObj){return ((exgui.Object2String)dateVfy).Obj2String(vluObj);}
    public Object cellStringToObject(String str){
      return ((exgui.ultratable.CellTxtEditorFormat)dateVfy).cellStringToObject(str);
    }
    public String formatPromptMsg(){
      return prompt4Invailid;
    }
    public boolean isValid(){
      return isFormatValid(txtProdByrPlnDlvy.getText(),0,0);
    }
    public boolean isFormatValid(String dataStr,int i,int j){
      if(dataStr==null||dataStr.trim().length()==0)return false;
      if(!((exgui.ultratable.CellTxtEditorFormat)dateVfy).isFormatValid(dataStr,i,j))
        return false;
      //test if between the system-default-value of plan delivery date need to check or not
      if(buyPlanBgn==null&&buyPlanEnd==null){
        return true;
      }
      long miscSecBgn=(buyPlanBgn==null)?0:((java.sql.Timestamp)buyPlanBgn).getTime();
      long miscSecEnd=(buyPlanEnd==null)?0:((java.sql.Timestamp)buyPlanEnd).getTime();
      long miscPlanDel=
          ((java.util.Date)cellStringToObject(txtProdByrPlnDlvy.getText())).getTime();
      if(miscSecBgn!=0){
        if(miscPlanDel<miscSecBgn)return false;
      }
      if(miscSecEnd!=0){
        if(miscPlanDel>miscSecEnd)return false;
      }
      return true;
    }
    public int getMaxLength(){return 10;}
  }

  protected exgui.DataBindJCombobox getCityComboboxByCountry(Object cntyName,
      JComboBox cbx,Record rec2map)throws Exception{
      Vector citiesVct=null;;
      if(cntyName!=null){
         citiesVct=(Vector)tempProperties.tmpH_tbl_CntyCityMap.get(cntyName);
      }
      if(citiesVct==null)citiesVct=new Vector();

      cbxCity.removeAllItems();
      if(citiesVct!=null && citiesVct.size()>1){
      exgui.DataBindJCombobox DbJcbxcbxCity =
          new exgui.DataBindJCombobox(cbxCity,
                                      "PROD_CITY_NAME",
                                      citiesVct,
                                      "CITY_NAME","CITY_NAME",
                                      rec2map.get("PROD_CITY_NAME"),"NONE",null);
        DbJcbxcbxCity.toMustModify();
        return  DbJcbxcbxCity;
      }else{
        exgui.DataBindJCombobox DbJcbxcbxCity =
            new exgui.DataBindJCombobox(cbxCity,
                                        "PROD_CITY_NAME",
                                        citiesVct,
                                        "CITY_NAME","CITY_NAME",
                                        rec2map.get("PROD_CITY_NAME"),"NONE",null);
        DbJcbxcbxCity.toMustModify();
        return DbJcbxcbxCity;
      }

  }
  public void doUpdate() throws Exception{
    isGui2RecordOk=gui2Record();
    if(!isGui2RecordOk) return;
    Cursor ksr=null;
    if(util.PublicVariable.APP_FRAME!=null){
     ksr=util.PublicVariable.APP_FRAME.getCursor();
     util.PublicVariable.APP_FRAME.setCursor(new Cursor(Cursor.WAIT_CURSOR));
    }
      try{
        Record updatedRecord= myDbHander.addRecord(recToMapping);
        processhandler.template.Properties.getCenteralControler().setCurrentEditingMasterRecord(
          updatedRecord
        );
        newtimes.production.ProdMaintain_Properties.PRODUCTION_AUDIT_STATUS_COLUMN_NAME="PRODUCTION_AUDIT_STATUS";
        newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_PK=updatedRecord.getInt(0);
        newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD=updatedRecord;
        newtimes.preproduction.Constants.PREPROD_USING_MTRL_DTLS =
                  respondingMTR_V_Records;
         //swith to detail page..,color lib edit page...
        recClonedForCheck=(Record)util.MiscFunc.deepCopy(recToMapping);
        processhandler.template.Properties.getCenteralControler().doCommandExecute(
         new newtimes.production.process.prodmaintain.TgrToListStyles()
         );

      }catch(Exception e){
        //e.printStackTrace();
        throw e;
      }finally{
        if(ksr!=null){
         //setCursor(ksr);
          util.PublicVariable.APP_FRAME.setCursor(ksr);
        }
      }
  }
  public void doAddNew() throws Exception{
      isGui2RecordOk=gui2Record();
      Cursor ksr=null;
      if(!isGui2RecordOk) return;
      if(util.PublicVariable.APP_FRAME!=null){
       ksr=util.PublicVariable.APP_FRAME.getCursor();
       util.PublicVariable.APP_FRAME.setCursor(new Cursor(Cursor.WAIT_CURSOR));
      }
      try{
        Record rec=myDbHander.addRecord(recToMapping);
        //switch to color lib detail page..
        rec=myDbHander.findbyPk(rec.getInt(0));
        recClonedForCheck=(Record)util.MiscFunc.deepCopy(recToMapping);
        newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_PK=rec.getInt(0);
        processhandler.template.Properties.getCenteralControler().setCurrentEditingMasterRecord(
          rec
        );
       newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD=rec;
        newtimes.preproduction.Constants.PREPROD_USING_MTRL_DTLS =
                          respondingMTR_V_Records;
        processhandler.template.Properties.getCenteralControler().doCommandExecute(
         new newtimes.production.process.prodmaintain.TgrToListPlanQuotaWithProdHead());

      }catch(Exception e){
         throw e;
      }finally{
        if(ksr!=null){
         //setCursor(ksr);
          util.PublicVariable.APP_FRAME.setCursor(ksr);
        }
      }
    //if this is a "master data,we can call "AbleToShowDetial" of current command object.
  }
  public void doDelete() {
    if(!exgui.verification.VerifyLib.showConfirm(
        "Are You Sure To Delete This Production?","Are You Sure?")) return;
    super.doDelete();
    try{
      processhandler.template.Properties.getCenteralControler().goBack();
    }catch(Exception e){
      e.printStackTrace();
    }
  }
  public void doCopy() {
     //call gui2Record,mapping data fields to record column.
     try{
       gui2Record();
       Record tmprec = (Record) util.MiscFunc.deepCopy(recToMapping);
       util.ApplicationProperites.setProperties(
           id4ApplicationProperties,
           tmprec
           );
       //also,we need to copy the co-responding MTR_V_PREPROD records..
       Vector vct2Copy=(Vector)util.MiscFunc.deepCopy(respondingMTR_V_Records);
       util.ApplicationProperites.setProperties(
           id4ApplicationProperties+"_MTR_V_Records",
           vct2Copy
           );

     }catch(Exception e){
        e.printStackTrace();
     }
  }
  public boolean gui2Record(){
    //when super class call myDbHander to update record,also,update co-responding MTR_V_Records
    myDbHander.setMTR_V_Records(respondingMTR_V_Records);
    if(!super.gui2Record())return false;
    //test :buyuer,buyer_div ,center,department can not be null.
    if(!buyerPlanDlvDbCheck.isValid()){
      exgui.verification.VerifyLib.showAlert("Please Assign Buyer Plan Delivery Date",
                                             "Please Assign Buyer Plan Delivery");
      buyerPlanDlvDbCheck.getGUIcomponent().grabFocus();

      return false;
    }
    if(this.slkHeadBuyer.getSelectedValue()==null){
      exgui.verification.VerifyLib.showAlert("Please Assign A Buyer Of This Product",
                                             "Please Select A Buyer");
      slkHeadBuyer.grabFocus();
      return false;
    }
    if(this.slkHeadMaker.getSelectedValue()==null){
      exgui.verification.VerifyLib.showAlert("Please Assign A Maker Of This Product",
                                             "Please Select A Maker");
      slkHeadMaker.grabFocus();
      return false;
    }
    //detect if have to select division.
    if(DbJcbxcbxQcCountry.getSelectedValue()==null){
      exgui.verification.VerifyLib.showAlert("Please Assign A QC Country Of This Product",
                                             "Please Select A QC Country");
      cbxQcQnty.grabFocus();
      return false;
    }
    //if production type is wozen,knit,sweater,have to check if year is 4 digit and season can not be null
    try{
      int cnvYearData =
          Integer.parseInt(txtYear.getText().trim());
      Object objBgnYear=
          newtimes.preproduction.Constants.SYSTEM_DEFAULT_RECORD.get("year_rng_bgn");
      Object objEndYear=
          newtimes.preproduction.Constants.SYSTEM_DEFAULT_RECORD.get("year_rng_end");
      if(objBgnYear!=null){
        int bgnYear=Integer.parseInt(objBgnYear.toString());
        if(cnvYearData<bgnYear){
          exgui.verification.VerifyLib.showAlert(
          "Year Can not less than "+bgnYear,"Year Can not less than "+bgnYear);
          txtYear.grabFocus();
          return false;
        }
      }
      if(objEndYear!=null){
        int endYear=Integer.parseInt(objEndYear.toString());
        if(cnvYearData>endYear){
          exgui.verification.VerifyLib.showAlert(
          "\"Year\" Can not more than "+endYear,"\"Year\" Can not more than "+endYear);
          txtYear.grabFocus();
          return false;
        }
      }

    }catch(Exception e){
      exgui.verification.VerifyLib.showAlert("\"Year\" Column Should Be 4 digits",
                                             "\"Year\" Column Should Be 4 digits");
      txtYear.grabFocus();
      return false;
    }
    if(needtoCheckDiv){
      if(dbCbxdiv.getSelectedValue()==null){
        exgui.verification.VerifyLib.showAlert("Please Assign A Division Of This Product Buyer",
                                               "Please Select A Division");
        dbCbxdiv.grabFocus();
        return false;
      }
    }
    try{
      java.util.Vector centRecords=tempProperties.tmpCenters;
      java.util.Vector dptRecords=tempProperties.tmpDepartment;
      java.util.Vector dvsnRecords=tempProperties.tmpDivision;
      if (recToMapping.get("PROD_BUYER_DIVISION") == null) {
          Record firstDivRec=(Record)dvsnRecords.get(0);
          recToMapping.set("PROD_BUYER_DIVISION",firstDivRec.get("DIV_CODE"));
      }
      if (recToMapping.get("PROD_CEN_CODE") == null) {
          Record firstCenRec=(Record)centRecords.get(0);
          recToMapping.set("PROD_CEN_CODE",firstCenRec.get("CEN_CODE"));
      }
      if (recToMapping.get("PROD_DEPTMENT") == null) {
          Record firstDptRec=(Record)dptRecords.get(0);
          recToMapping.set("PROD_DEPTMENT",firstDptRec.get("DEP_CODE"));
      }
      //copy the string from "production destination combobox"
      //System.out.println("destString is :"+recToMapping.get("production_sc_dest"));
      Object objDest=recToMapping.get("production_sc_dest");
      String deststring=(objDest==null)?"":objDest.toString().trim().toUpperCase();
      if(deststring.getBytes().length>20){
        exgui.verification.VerifyLib.showAlert("Destination Can Not Over 20 Characters",
                                               "Field:Destination Is Too Long");
        return false;
      }else{
        recToMapping.set("production_sc_dest",deststring);
      }
    }catch(Exception e){
      e.printStackTrace();
      return false;
    }
    return true;
  }
  public void doPaste() {
    try{
      Record tmprec = (Record) util.ApplicationProperites.getProperties(
        id4ApplicationProperties);
      if(tmprec==null){
        exgui.verification.VerifyLib.showAlert("No Copied Data!!",
        "No Copied Data!!");
        return;
      }
      for(int i=0;i<recordColumnsToCopy.length;i++){
        recToMapping.set(
           recordColumnsToCopy[i],
           tmprec.get(recordColumnsToCopy[i])
        );
      }
      respondingMTR_V_Records =(Vector)
          util.ApplicationProperites.getProperties(id4ApplicationProperties+"_MTR_V_Records");
      isProcessingPast=true;
      record2Gui();
      isProcessingPast=false;
    }catch(Exception e){
       e.printStackTrace();
    }
  }
  public void setPagedDataFactory(DB_Preprod preproductionHandler){
     super.setPagedDataFactory(preproductionHandler);
     myDbHander=preproductionHandler;

  }

  public void doPrint()throws Exception{
    throw new processhandler.commands.CommandException("the print method of Production head is not implemented yet");
  }
  private void mappingListMtrlNo(){
    StringBuffer sb=new StringBuffer();
    for(int i=0;i<respondingMTR_V_Records.size();i++){
      database.datatype.Record rec=(database.datatype.Record)
             respondingMTR_V_Records.get(i);
       sb.append((String)rec.get(1));
       if(i<respondingMTR_V_Records.size()-1)sb.append(",");
    }
    lblMtrList.setText(sb.toString());
    newtimes.preproduction.Constants.PREPROD_USING_MTRL_DTLS_STRING=sb.toString();
  }
  void btn2SelectMtrls_actionPerformed(ActionEvent e) throws Exception{

      //pop ut the multi-material select box and modify the vector --respondingMTR_V_Records
      PnlKeyWordSlkMtrDtl pnlInit=new PnlKeyWordSlkMtrDtl();
      SelectMtrlDtl4MtrVPreProd pnlMtrlDtl=new  SelectMtrlDtl4MtrVPreProd();
      pnlMtrlDtl.setSelectedMtrlDtl((Vector)util.MiscFunc.deepCopy(respondingMTR_V_Records));
      pnlInit.setDefalutNext(pnlMtrlDtl);
      DlgSelectBuyerMaker dlg=new DlgSelectBuyerMaker(
          util.PublicVariable.APP_FRAME
          ,"select Matrial Data",true,pnlInit);
      dlg.setSize(500,400);
      exgui.UIHelper.setToScreenCenter(dlg);
      pnlInit.storedMap.put(Kies.KEY_INIT_SELEC_BUYERMAKER_TYPE_NAME,"Material No.");//select buyer maker type is 2---maker.
      //pnlInit.storedMap.put(Kies.KEY_DLG_OBJ,dlg);
      dlg.show();
      if(dlg.getDialogStatus()==dlg.DIALOG_OK){
        //System.out.println("reslut is:"+dlg.getDialogResult());
        java.util.HashMap hm=
        (java.util.HashMap)((java.util.HashMap)dlg.getDialogResult()).get(Kies.KESY_HM_SELECTED_MATERIAL_DETAIL_RECORDS);
        respondingMTR_V_Records.clear();
        respondingMTR_V_Records.addAll(hm.values());
        mappingListMtrlNo();
      }else{
        //System.out.println("conversation is over");
      }
  }
  JComboBox cbxQcQnty = new JComboBox();
  JLabel whiteBkgBlueCharLabel21 = new JLabel();
  JLabel whiteBkgBlueCharLabel4 = new JLabel();
  JComboBox cbxScPrxTrm = new JComboBox();
  JLabel whiteBkgBlueCharLabel5 = new JLabel();
  JTextField txtRange = new JTextField();
  JTextField txtGrpName = new JTextField();
  JLabel blueBkgWhiteCharLabel4 = new JLabel();
  JTextField txtGroup = new JTextField();
  JLabel whiteBkgBlueCharLabel3 = new JLabel();
  JLabel whiteBkgBlueCharLabel7 = new JLabel();
  JComboBox cbxCity = new JComboBox();
  JTextField txtGspReq = new JTextField();
  JLabel whiteBkgBlueCharLabel10 = new JLabel();
  JComboBox cbxBranches = new JComboBox();
  JLabel blueBkgWhiteCharLabel21 = new JLabel();
  JTextField txtBuyerSCNO = new JTextField();
  JLabel whiteBkgBlueCharLabel23 = new JLabel();
  public JComboBox cbxSCDest = new JComboBox();
  JLabel jLabel1 = new JLabel();
  JLabel blueBkgWhiteCharLabel20 = new JLabel();
  JTextField txtBuyerLabel = new JTextField();
  JLabel jLabel2 = new JLabel();
  public JComboBox cbxTgtDest = new JComboBox();
  JTextField txtProtoNo = new JTextField();
  JLabel blueBkgWhiteCharLabel9 = new JLabel();

}

class PnlEditPPDHead_btn2SelectMtrls_actionAdapter implements java.awt.event.ActionListener {
  PnlEditPPDHead adaptee;

  PnlEditPPDHead_btn2SelectMtrls_actionAdapter(PnlEditPPDHead adaptee) {
    this.adaptee = adaptee;
  }
  public void actionPerformed(ActionEvent e) {
    try{
      adaptee.btn2SelectMtrls_actionPerformed(e);
    }catch(Exception eii){
       eii.printStackTrace();
    }
  }
}

class PnlEditPPDHead_txtProdByrPlnDlvy_focusAdapter extends java.awt.event.FocusAdapter {
  PnlEditPPDHead adaptee;

  PnlEditPPDHead_txtProdByrPlnDlvy_focusAdapter(PnlEditPPDHead adaptee) {
    this.adaptee = adaptee;
  }
  public void focusLost(FocusEvent e) {
    adaptee.txtProdByrPlnDlvy_focusLost(e);
  }
}
class PnlEditPPDHead_cbxCountry_itemAdapter implements java.awt.event.ItemListener {
  PnlEditPPDHead adaptee;

  PnlEditPPDHead_cbxCountry_itemAdapter(PnlEditPPDHead adaptee) {
    this.adaptee = adaptee;
  }
  public void itemStateChanged(ItemEvent e) {
    adaptee.cbxCountry_itemStateChanged(e);
  }
}
class PnlEditPPDHead_cbxDiv_itemAdapter implements java.awt.event.ItemListener {
  PnlEditPPDHead adaptee;

  PnlEditPPDHead_cbxDiv_itemAdapter(PnlEditPPDHead adaptee) {
    this.adaptee = adaptee;
  }
  public void itemStateChanged(ItemEvent e) {
    adaptee.cbxDiv_itemStateChanged(e);
  }

}

class PnlEditPPDHead_cbxCenter_itemAdapter implements java.awt.event.ItemListener {
  PnlEditPPDHead adaptee;

  PnlEditPPDHead_cbxCenter_itemAdapter(PnlEditPPDHead adaptee) {
    this.adaptee = adaptee;
  }
  public void itemStateChanged(ItemEvent e) {
    adaptee.cbxCenter_itemStateChanged(e);
  }

}


