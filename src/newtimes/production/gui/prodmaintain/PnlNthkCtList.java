package newtimes.production.gui.prodmaintain;

import java.awt.*;
import javax.swing.JPanel;
import exgui.*;
import java.util.*;
import database.datatype.Record;
import javax.swing.JComboBox;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import java.awt.event.ItemListener;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.event.*;

/**
 * <p>Title: </p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: </p>
 * @author not attributable
 * @version 1.0
 */

public class PnlNthkCtList extends processhandler.template.PnlTableEditor
 implements processhandler.DataProcesser,
 java.awt.event.MouseListener
 {
  //column are
  //PROD_HEAD_PK, PROD_MAKER, PROD_SC_NO, PROD_CT_SEQ, PROD_CT_CURRENCY,
  //PROD_CT_PRX_TRM, PROD_CT_PORT, PROD_CT_ISSU, PROD_CT_PYT_TRM
  //virtual column-MAKER_CODE is generated by query
  static String DB_CT_SEQ="PROD_CT_SEQ";
  static String DISP_CT_SEQ="C/T\nSEQ";

  static String DB_MKR_CODE="MAKER_CODE";
  static String DISP_MKR_CODE="MAKER";

  static String DB_MKR_BTN="dots";
  static String DISP_MKR_BTN="  ";
  static String DB_VDR_BTN="dots4vendor";
  static String DISP_VDR_BTN="   ";

  static String DB_VDR_CODE="VENDOR_CODE";
  static String DISP_VDR_CODE="VENDOR";


  static String DB_PAYMENT_TERM="PROD_CT_PYT_TRM";
  static String DISP_PAYMENT_TERM="   PAYMENT TERM¡¿   ";

  static String DB_CURRENCY="PROD_CT_CURRENCY";
  static String DISP_CURRENCY="C/T\nCURR¡¿";

  static String DB_PRICE_TERM="PROD_CT_PRX_TRM";
  static String DISP_PRICE_TERM="C/T PRX\nTERM¡¿";

  static String DB_DEST="PROD_CT_PORT";
  static String DISP_DEST="  C/T PORT¡¿   ";

  static String DB_ISSUE_DATE="PROD_CT_ISSU";
  static String DISP_ISSUE_DATE="C/T\nIssueDate";
  static String DB_COUNTRY_NAME="PROD_CNTY";
  static String DISPLAY_COUNTRY_NAME="  QC Country¡¿  ";
  static String DB_CITY_NAME="PROD_CITY";
  static String DISPLAY_CITY_NAME=" CITY ¡¿";

  static String DISPLAY_BANK="     NAME     ";
  static String DB_BANK="COLLECT_BANK";

  static String DISPLAY_BANK_ADDR1="  ADDRESS LINE 1  ";
  static String DB_BANK_ADDR1="BANK_ADD1";

  static String DISPLAY_BANK_ADDR2="  ADDRESS LINE 2    ";
  static String DB_BANK_ADDR2="BANK_ADD2";

  static String DISPLAY_SWIFT="  SWIFT  ";
  static String DB_SWIFT="SWIFT";

  static String DISPLAY_RCPT="  RECIPIENT  ";
  static String DB_RCPT="COLLECT_BY";

  static String DISPLAY_ACCOUNT_NO=" ACCOUNT# ";
  static String DB_ACCOUNT_NO="ACC_NO";
  static String DISPLAY_MKR_SIGNE_DATE="Signed\nDate";


  static MyBuyerSelector slkMaker=null;
  //static MyVendorSelector slkVdr=null;
  int lastSelectedRow;
  static String sqlChkCtUsed=null;
  boolean isChecking4Update=false;
  static java.util.HashMap City_CountryMap=null;
  static exgui.ultratable.Wraper4tblCbx emptycity[]=null;
  JComboBox cbxCountry=null;
  JComboBox cbxCity=null;
  static String countryNames[]=null;
  static CountyModifyListener countryModefied=null;
  static boolean isRealChangeCountry=true;
  boolean isMakerChanged=false;
  public static boolean IS_SHIPPED=false;
  static int  CT_PAYMENTERM_AT=-1;
  static int CT_ISSUE_AT=-1;
  static int CT_PRINT_DATE_AT=-1;
  exgui.ultratable.MultiEditorJTable  multiEditorJTable;
  MakerChanged mkrChanged=new MakerChanged();
  static java.text.DateFormat df=new java.text.SimpleDateFormat("yyyy/MM/dd");
  public PnlNthkCtList(){
    super();
    getJtable().addMouseMotionListener(new TblMouseMov());
    try{
      if(countryModefied==null){
        countryModefied=new CountyModifyListener();

      }
      if(emptycity==null){
        emptycity = new exgui.ultratable.Wraper4tblCbx[1];
        emptycity[0] = new exgui.ultratable.Wraper4tblCbx();
        emptycity[0].setValue(null);
        emptycity[0].setString("");
      }

      if (City_CountryMap == null) {
        //this map is to be used while user change the country field,so as the city combobox's model will be changed
        City_CountryMap = new java.util.HashMap();

        Vector countries = new Vector();
        countries.add("");

        for (int i = 0; i < newtimes.preproduction.guis.tempProperties.tmpCountries.size(); i++) {
          Record recTmp = (Record)newtimes.preproduction.guis.tempProperties.tmpCountries.get(i);
          String key = (String)recTmp.get(0); //"CNTY_NAME"--country name
          countries.add(key);
          Vector vct = (Vector)newtimes.preproduction.guis.tempProperties.
              tmpH_tbl_CntyCityMap.get(key);
          if (vct == null) {
            City_CountryMap.put(key, emptycity);
          } else {
            exgui.ultratable.Wraper4tblCbx obj2put[] =
                new exgui.ultratable.Wraper4tblCbx[vct.size() + 1];
            obj2put[0] = new exgui.ultratable.Wraper4tblCbx();
            obj2put[0].setValue(null);
            obj2put[0].setString("");

            for (int j = 0; j < vct.size(); j++) {
              Record recCity = (Record)vct.get(j);
              obj2put[j + 1] = new exgui.ultratable.Wraper4tblCbx();
              obj2put[j + 1].setValue(recCity.get(0));
              obj2put[j + 1].setString((String)recCity.get(0));
            }
            City_CountryMap.put(key, obj2put);
          }
        }
        countryNames=(String[])countries.toArray(new String[0]);
      }
    }catch(Exception exp){
      exp.printStackTrace();
      util.ExceptionLog.exp2File(exp,"");
    }
    if(sqlChkCtUsed==null){
      StringBuffer sb=new StringBuffer();
      sb.append("select count(a.sty_seq),b.prod_head_pk,b.prod_ct_seq from ");
      sb.append("style a,prod_ct_infor b where ");
      sb.append("a.record_delete_flag='1' and b.record_delete_flag='1' ");
      sb.append("and a.prod_head_pk=b.prod_head_pk ");
      sb.append("and b.prod_ct_seq in (##########) ");
      sb.append("and b.PROD_SC_NO='@@@@@@@@@@' ");
      sb.append("group by b.prod_head_pk,b.prod_ct_seq ");
      sqlChkCtUsed=sb.toString();
    }
    if(slkMaker==null){
      slkMaker=new MyBuyerSelector();
      slkMaker.init("",null,slkMaker.TYPE_MAKER,true);
    }
    /*
    if(slkVdr==null){
      slkVdr=new MyVendorSelector();
      slkVdr.init("",null,slkMaker.TYPE_VENDOR,true);
    }*/

    try{
      slkMaker.setSelectingCenter(
          (String)newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD.
          get("prod_cen_code"));
      slkMaker.setModifyNotifyTo(mkrChanged);
      /*
      slkVdr.setSelectingCenter(
          (String)newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD.
          get("prod_cen_code"));
      slkVdr.setModifyNotifyTo(new VendorChanged());
      */
    }catch(Exception exp){
      exp.printStackTrace();
      util.ExceptionLog.exp2File(exp,"");
    }
    getPanelContainsButtons().removeAll();
    getJtable().addMouseListener(this);
    if(getJtable().getRowCount()>0){
      getJtable().changeSelection(0,0,false,false);
    }
    newtimes.preproduction.Constants.addPopEditorMenue(this);
  }
  /*
   public class MyVendorSelector extends newtimes.preproduction.buyermakerselect.SelectBuyerMaker{

    public  void btnDots_actionPerformed(java.awt.event.ActionEvent e) {
      super.btnDots_actionPerformed(e);

    }
  }*/
   public class MyBuyerSelector extends newtimes.preproduction.buyermakerselect.SelectBuyerMaker{
    public  void btnDots_actionPerformed(java.awt.event.ActionEvent e) {
      super.btnDots_actionPerformed(e);
    }
  }
   public void doAddNew()throws Exception{
     try{
       isChecking4Update=true;
       if(!checkVendor())return;
       if(!checkIssueDate())return;
       //if(!isPaymentTermReady())return;
       super.doAddNew();
     }finally{
       isChecking4Update = false;
     }

    //newtimes.production.process.prodmaintain.DB_NTHKStyleListHandler.force2UpdateCtProdPkMap();
    newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD=
       newtimes.preproduction.process.DB_Preprod.getInstance().findbyPk(
        newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD.getInt(0));
    updateStatusApp2Pendding();
    javax.swing.SwingUtilities.invokeLater(
     new Runnable(){
      public void run() {
        getJtable().changeSelection(0, 0, false, false);
        getJtable().editCellAt(0, 0);
        getJtable().grabFocus();
     }
     }
    );

  }
  protected class TblMouseMov extends java.awt.event.MouseMotionAdapter{
    public void mouseMoved(java.awt.event.MouseEvent e){
        int rowAt=getJtable().rowAtPoint(e.getPoint());
        int colAt=getJtable().columnAtPoint(e.getPoint());
        if(rowAt==-1){
         getJtable().setToolTipText("");
         return;
        }
        //if there is not maker,still display no tool tips
        /*
        if(getJtable().getValueAt(rowAt,1)==null||getJtable().getValueAt(rowAt,1).toString().trim().length()==0){
          getJtable().setToolTipText("");
          return;
        }
        */
        Record rec=(Record)getDisplayingRecords().get(rowAt);

        StringBuffer sb=new StringBuffer();
        if(colAt==3||colAt==4||colAt>11){
          //vender tool tips
          if(getJtable().getValueAt(rowAt,3)==null||getJtable().getValueAt(rowAt,3).toString().trim().length()==0){
            getJtable().setToolTipText("");
            return;
          }

          String fullName=(String) rec.get(38);
          String hkCode=(String) rec.get(34);
          sb.append("<html><body>VENDOR:<br>");
          sb.append(fullName);
          if(hkCode!=null && (!hkCode.toUpperCase().trim().equals("NULL"))){
            sb.append("<br>");
            sb.append("HK CODE:");sb.append(hkCode);
          }
          sb.append("<br>");
          for (int i = 39; i < 42; i++) {
            String tmpstr = (String)rec.get(i);
            if (tmpstr != null && (!tmpstr.toUpperCase().trim().equals("NULL"))){
               sb.append(tmpstr);
               if(i!=41)sb.append("<br>");
            }
          }
          sb.append("</body></html>");

        }else{
          if(getJtable().getValueAt(rowAt,1)==null||getJtable().getValueAt(rowAt,1).toString().trim().length()==0){
            getJtable().setToolTipText("");
            return;
          }
          //Maker tool tips
          String fullName=(String) rec.get(21);
          String hkCode=(String) rec.get(18);
          sb.append("<html><body>MAKER:<br>");
          sb.append(fullName);
          if(hkCode!=null && (!hkCode.toUpperCase().trim().equals("NULL"))){
            sb.append("<br>");
            sb.append("HK CODE:");sb.append(hkCode);
          }
          sb.append("<br>");
          for (int i = 22; i < 26; i++) {
            String tmpstr = (String)rec.get(i);
            if (tmpstr != null && (!tmpstr.toUpperCase().trim().equals("NULL"))){
               sb.append(tmpstr);
               if(i!=25)sb.append("<br>");
            }
          }
          sb.append("</body></html>");
        }
        getJtable().setToolTipText(sb.toString());

    }
  }
  boolean checkIssueDate()throws Exception{
    Vector vct=getDisplayingRecords();
    for(int i=0;i<vct.size();i++){
      Record rec=(Record)vct.get(i);
      Object objCt=getJtable().getValueAt(i,CT_ISSUE_AT);
      if(null==objCt || "".equals(objCt.toString().trim())){
        exgui.verification.VerifyLib.showAlert("Please Assigne C/T Date","Please Assigne C/T Date");
        return false;
      }
      java.util.Date numCreateDate=rec.getDate("REcord_create_date");
       java.util.Calendar cld=java.util.Calendar.getInstance();
       cld.setTimeInMillis(numCreateDate.getTime());
       cld.add(cld.MONTH,-1);

      java.util.Date numCtDate =df.parse(objCt.toString());
      numCreateDate.setTime(cld.getTimeInMillis());

      if(numCtDate.before(numCreateDate)){
        exgui.verification.VerifyLib.showAlert("C/T Issue Date Can Not before One Month Of Create Date",
                                               "C/T Date Too early");
        return false;
      }
    }
    return true;
  }
  boolean checkVendor()throws Exception{
     Vector vct=getDisplayingRecords();
     for(int i=0;i<vct.size();i++){
       Record rec=(Record)vct.get(i);
       Object objVendor=rec.get("vender_seq");
       Object objMaker=rec.get("PROD_MAKER");
       if(objVendor==null){
         exgui.verification.VerifyLib.showAlert("Please Assigne Vendor","Please Assigne Vendor");
         return false;
       }
       if(objMaker==null){
         exgui.verification.VerifyLib.showAlert("Please Assigne Maker","Please Assigne Maker");
         return false;
       }

       /*
       if(objVendor!=null){
         if(objMaker==null){
           rec.set("PROD_MAKER",objVendor);
           int org_lastSelectedRow=lastSelectedRow;
           slkMaker.init("",new Integer(objVendor.toString()),slkMaker.TYPE_MAKER,true);
           Record recMaker=slkMaker.currentRecord();
           mkrChanged.changeBuyerMaker(recMaker);
           lastSelectedRow=org_lastSelectedRow;
         }
         continue;
       }

       if(objMaker!=null){
         rec.set("vender_seq",objMaker);
         getJtable().setValueAt(getJtable().getValueAt(i,1),i,3);
       }
       */
     }
     //if is xx-8xxxxx,then check vendor data
     String sc_no=(String)newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD.get("prod_sc_no");
     int desh_at=sc_no.indexOf("-");
     if(desh_at==-1)return true;
     ++desh_at;
     int year_digit=Integer.parseInt(sc_no.substring(desh_at,desh_at+1));
     //if(year_digit>7){
       //from 2008,chekc vendor data
       for(int i=0;i<getJtable().getRowCount();i++){
         if(isCheckPaymentTerm(i))continue;//check/cheque is allow to skip bank data.
          for(int j=12;j<getJtable().getColumnCount();j++){
            if(j==14) continue;//except address2 (in case address too short)
            //18th column,is the print date for NTERIC only
            if(j==CT_PRINT_DATE_AT){
              Object objPrintDate=getJtable().getValueAt(i,j);
              if(getJtable().isCellEditable(i,j) &&
                 (objPrintDate==null ||objPrintDate.toString().trim().length()==0)){
                exgui.verification.VerifyLib.showAlert("Please Assigne Signe Date",
                                                       "Please Assigne Signe Date");
                return false;
              }else{
                continue;
              }
            }
             Object objbankData=getJtable().getValueAt(i,j);
             if(objbankData==null||objbankData.toString().trim().length()==0){
               exgui.verification.VerifyLib.showAlert("Please fill Vendoer's Bank & Swift & Recipient & Account#",
                                                      "Please Complete Vendor Data");
               return false;
             }
          }
       }
     //}
     return true;
  }
  boolean isCheckPaymentTerm(int row){
      exgui.ultratable.Wraper4tblCbx objPaymentWrap=(exgui.ultratable.Wraper4tblCbx)getJtable().getValueAt(row,7);
      /*
      if(objPaymentWrap==null){
        //exgui.verification.VerifyLib.showAlert("Please Select Payment Term","Please Select Payment Term");
        return false;
      }
      */
      String objPayment=objPaymentWrap.toString();
      /*
      if(null==objPayment || objPayment.trim().length()==0){
         //exgui.verification.VerifyLib.showAlert("Please Select Payment Term","Please Select Payment Term");
         return false;
      }
      */
      /*
      if((objPayment.indexOf("CHECK")==-1) && (objPayment.indexOf("CHEQUE")==-1)){
         exgui.verification.VerifyLib.showAlert("Payment Term Type only allow for \"CHECK\" or \"CHEQUE\" ",
                                                "Payment Term Type Not Allowed");
         return false;
      }
      */
     if((objPayment.indexOf("CHECK")!=-1) || (objPayment.indexOf("CHEQUE")!=-1)){
       return true;
     }
    return false;
  }
  public void doUpdate()throws Exception{
    try{
      isChecking4Update = true;
      if(!checkVendor())return;
      if(!checkIssueDate())return;
      //if(!isPaymentTermReady())return;
      super.doUpdate();
      reload();

      newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD.set("production_qc_cnty",
                                                                      getJtable().getValueAt(0,5));

       newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD.set("prod_city_name",
                                                                        getJtable().getValueAt(0,6));

// if modified ct attributions,also have to setto temp data for style's "update po attribution" function"

//String ct_dest_Default=(String)newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD.get("PRODUCTION_SC_DEST");
//String ct_prx_trm_Default=(String)newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD.get("PROduction_SC_PRC_TRM");
//String ct_currency_Default=(String)newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD.get("PRODUCTION_SC_CURRENCY");


      javax.swing.SwingUtilities.invokeLater(
       new Runnable(){
        public void run() {
          getJtable().changeSelection(0, 0, false, false);
          getJtable().editCellAt(0, 0);
          getJtable().grabFocus();
       }
       }
      );

    }finally{
      isChecking4Update=false;
    }
  }
  public void doPrint(){

  }
  public void doDelete()throws Exception{
    //check if the production head related to any detail
    //also,the c/t seq:1 is not allow tobe delete
    int rows[]=getJtable().getSelectedRows();
    if(rows.length==0){
      exgui.verification.VerifyLib.showAlert("Please Select Row(s) To Delete",
                                             "Please Select Row(s) To Delete");

    }
      //return;
    StringBuffer sb=new StringBuffer();
    for(int i=0;i<rows.length;i++){
      if(rows[i]==0){
        exgui.verification.VerifyLib.showAlert("C/T SEQ 1 Is Default C/T Could Note Be Deleted!!",
                                               "Default C/T could not be deleted");
        getJtable().changeSelection(0,0,false,false);
        return;
      }
      Record rec=(Record)getDisplayingRecords().get(rows[i]);
      if(sb.length()>0)sb.append(",");
      sb.append(String.valueOf(rec.getInt("prod_ct_seq")));
    }
    String sql=new String(sqlChkCtUsed);
    sql=util.MiscFunc.Replace(sql,"@@@@@@@@@@",
                              (String)newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD.get("prod_sc_no"));
    sql=util.MiscFunc.Replace(sql,"##########",sb.toString());
    util.MiscFunc.showProcessingMessage();
    Vector vct=exgui2.CONST.BASIC_MAIN_EJB.getDatas(
      util.PublicVariable.USER_RECORD,
      sql,1,99999);
    util.MiscFunc.hideProcessingMessage();
     if(vct.size()==0){
       try{
         isChecking4Update=true;
         //if(!checkVendor())return;
         super.doUpdate();
         updateStatusApp2Pendding();
         super.doDelete();
       }finally{
         isChecking4Update=false;
       }
       return;
     }else{
       sb=new StringBuffer();
       for(int i=0;i<vct.size();i++){
         Record rec=(Record)vct.get(i);
         //ct seq in used,some style related
         if(rec.getInt(0)>0){
           if(sb.length()>0){
             sb.append(" and ");
           }
           sb.append(rec.getInt(2));//get c/t seq No.
         }
       }
       if(sb.length()>0){
         exgui.verification.VerifyLib.showAlert("C/T :"+sb.toString()+
                                                " already referenced by styles\n"+
                                                "Please delete the related Styles before delete C/T",
                                                "C/T In Used");
         return;
       }else{
         try{
           isChecking4Update=true;
           if(!checkVendor())return;
           if(!checkIssueDate())return;
           //if(!isPaymentTermReady())return;
           super.doUpdate();
           updateStatusApp2Pendding();
           super.doDelete();
         }finally{
           isChecking4Update=false;
         }
         //newtimes.production.process.prodmaintain.DB_NTHKStyleListHandler.force2UpdateCtProdPkMap();
         newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD=
            newtimes.preproduction.process.DB_Preprod.getInstance().findbyPk(
             newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD.getInt(0));

         javax.swing.SwingUtilities.invokeLater(
          new Runnable(){
           public void run() {
             getJtable().changeSelection(0, 0, false, false);
             getJtable().editCellAt(0, 0);
             getJtable().grabFocus();
          }
          }
         );

       }
     }

  }
  public int getEachPageRowCount(){return 99999;}
  public Hashtable getObject2StringConvertor(){
    java.util.Hashtable ht=new Hashtable();
    Object dateCnvNormal= exgui.verification.CellFormat.getDateStringFormaterAllowNull();
    ht.put(DISP_ISSUE_DATE,dateCnvNormal);
    Object chk10= exgui.verification.CellFormat.getOrdinaryField(100);
    Object chk120= exgui.verification.CellFormat.getOrdinaryField(120);
    //Object chk80= exgui.verification.CellFormat.getOrdinaryField(80);
    Object chk200= exgui.verification.CellFormat.getOrdinaryField(200);

    ht.put(DISP_MKR_CODE,chk10);
    ht.put(DISP_VDR_CODE,chk200);

    ht.put(DISPLAY_BANK,chk120);
    ht.put(DISPLAY_BANK_ADDR1,chk200);
    ht.put(DISPLAY_BANK_ADDR2,chk200);
    ht.put(DISPLAY_SWIFT,chk120);
    ht.put(DISPLAY_RCPT,chk120);
    ht.put(DISPLAY_ACCOUNT_NO,chk120);
    ht.put(DISPLAY_MKR_SIGNE_DATE,dateCnvNormal);
    //ht.put(DISP_CT_SEQ,intChk);//CT_SEQ field not allow to modify,it's generated by databse.
    return ht;
  }
  protected void updateStatusApp2Pendding()throws Exception{
    return;
    /*
    //is to update,if buyer is changed,have to update approval to pendding mode
    if(!isMakerChanged)return;
    isMakerChanged=false;
    int statusCode=0;
    Object objStatus=
        newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD.get("PRODUCTION_AUDIT_STATUS");
    if(objStatus!=null)statusCode=Integer.parseInt(objStatus.toString());
    if(statusCode==1||statusCode==2)return;//no need to update po status.
    String sc_no=(String)newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD.get("prod_sc_no");
    newtimes.nthk_enqry.EnqDataEngin4Status.updatePoStatus(
     sc_no,
     "1","Maker Changed");
     newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD.set("PRODUCTION_AUDIT_STATUS","1");
    newtimes.preproduction.Constants.CURRENT_PREPROD_HEAD_RECORD.getModifiedFields().clear();
    */
}
   public void venderInforChanged(Record rec)throws Exception{
     Record recData = (Record)getDisplayingRecords().get(lastSelectedRow);

     if(rec==null){

         multiEditorJTable.mt.m_Col = 12;
         multiEditorJTable.mt.m_Text = "";
         recData.set(DB_BANK, "");
         getJtable().setValueAt("",lastSelectedRow,12);
         multiEditorJTable.mt.m_Col = 13;
         multiEditorJTable.mt.m_Text = "";
         recData.set(DB_BANK_ADDR1,"");
         getJtable().setValueAt("",lastSelectedRow,13);

         multiEditorJTable.mt.m_Col = 14;
         multiEditorJTable.mt.m_Text = "";
         recData.set(DB_BANK_ADDR2,"");
         getJtable().setValueAt("",lastSelectedRow,14);

         multiEditorJTable.mt.m_Col = 15;
         multiEditorJTable.mt.m_Text = "";
         recData.set(DB_SWIFT,"");
         getJtable().setValueAt("",lastSelectedRow,15);

         multiEditorJTable.mt.m_Col = 16;
         multiEditorJTable.mt.m_Text = "";
         recData.set(DB_RCPT,"");
         getJtable().setValueAt("",lastSelectedRow,16);

         multiEditorJTable.mt.m_Col = 17;
         multiEditorJTable.mt.m_Text = "";
         recData.set(DB_ACCOUNT_NO,"");
         getJtable().setValueAt("",lastSelectedRow,17);

         getJtable().changeSelection(lastSelectedRow, 3, true, true);
         multiEditorJTable.validate();
       return;
     }
     String bankName=(String)rec.get(2);
     multiEditorJTable.mt.m_Col=12;
     multiEditorJTable.mt.m_Text=(bankName==null?"":bankName);
     getJtable().setValueAt(bankName==null?"":bankName,lastSelectedRow,12);
     recData.set(DB_BANK,bankName);

     String addLine1=(String)rec.get(3);
     multiEditorJTable.mt.m_Col=13;
     multiEditorJTable.mt.m_Text=(addLine1==null?"":addLine1);
     getJtable().setValueAt(addLine1==null?"":addLine1,lastSelectedRow,13);
     recData.set(DB_BANK_ADDR1,addLine1);

     String addLine2=(String)rec.get(4);
     multiEditorJTable.mt.m_Col=14;
     multiEditorJTable.mt.m_Text=(addLine2==null?"":addLine2);
     getJtable().setValueAt(addLine2==null?"":addLine2,lastSelectedRow,14);
     recData.set(DB_BANK_ADDR2,addLine2);


     String swift=(String)rec.get(5);
     multiEditorJTable.mt.m_Col=15;
     multiEditorJTable.mt.m_Text=(swift==null?"":swift);
     getJtable().setValueAt(swift==null?"":swift,lastSelectedRow,15);
     recData.set(DB_SWIFT,swift);


     String rcv=(String)rec.get(6);
     multiEditorJTable.mt.m_Col=16;
     multiEditorJTable.mt.m_Text=(rcv==null?"":rcv);
     getJtable().setValueAt(rcv==null?"":rcv,lastSelectedRow,16);
     recData.set(DB_RCPT,rcv);


     String accNO=(String)rec.get(7);
     multiEditorJTable.mt.m_Col=17;
     multiEditorJTable.mt.m_Text=(accNO==null?"":accNO);
     getJtable().setValueAt(accNO==null?"":accNO,lastSelectedRow,17);
     recData.set(DB_ACCOUNT_NO,accNO);

     getJtable().changeSelection(lastSelectedRow,3,true,true);
      multiEditorJTable.validate();
   }
   public void venderChanged(Record rec) {
     try {
       if (rec == null) {
         getJtable().setValueAt("", lastSelectedRow, 3);
         Record recData = (Record)getDisplayingRecords().get(lastSelectedRow);
         recData.set("VENDER_SEQ", null);
         recData.set("is_vendor_changed", "1");
         recData.set("VENDOR_CODE", null);
         recData.set(38, null); //vander name
         recData.set(39, null); //vander addr1
         recData.set(40, null); //vender addr2
         recData.set(41, null); //vender addr3
         recData.set(42, null); //vender addr4
       } else {
         isMakerChanged = true;
         String hk_code = (String)rec.get("Bymkr_hk_code");
         if (hk_code == null) {
           hk_code = (String)rec.get("BYMKR_BRIEF");
         }
         getJtable().setValueAt(hk_code, lastSelectedRow, 3);

         Record recData = (Record)getDisplayingRecords().get(lastSelectedRow);
         recData.set("VENDOR_CODE", hk_code);
         recData.set("VENDER_SEQ", rec.get(0));
         recData.set("is_vendor_changed", "1");
         recData.set(38, rec.get("BYMKR_NAME")); //vender name
         recData.set(39, rec.get("BYMKR_ADDR1")); //vender addr1
         recData.set(40, rec.get("BYMKR_ADDR2")); //vender addr2
         recData.set(41, rec.get("BYMKR_ADDR3")); //vender addr3
         recData.set(42, rec.get("BYMKR_ADDR4")); //vender addr4
       }
     } catch (Exception exp) {
       exp.printStackTrace();
       util.ExceptionLog.exp2File(exp, "");
     }
   }
 class MakerChanged implements newtimes.preproduction.buyermakerselect.BuyerMakerChanged{
   public void changeBuyerMaker(Record rec) {
     try {
       if (rec == null) {
         exgui.ultratable.Wraper4tblCbx nullRp = new exgui.ultratable.
             Wraper4tblCbx();
         nullRp.setString("");
         nullRp.setValue(null);

         getJtable().setValueAt("", lastSelectedRow, 1);
         getJtable().setValueAt(nullRp, lastSelectedRow, 5); //country
         getJtable().setValueAt(nullRp, lastSelectedRow, 6); //city

         Record recData = (Record)getDisplayingRecords().get(lastSelectedRow);

         recData.set("PROD_CNTY", null);
         recData.set("PROD_CITY", null);
         recData.set("prod_maker", null);
         recData.set("is_maker_changed", "1");
         isMakerChanged = true;
         recData.set("MAKER_CODE", null);
         recData.set(21, null); //buyer maker name
         recData.set(22, null); //addr1
         recData.set(23, null); //addr2
         recData.set(24, null); //addr3
         recData.set(25, null); //addr4

       } else {
         isMakerChanged = true;
         String hk_code = (String)rec.get("Bymkr_hk_code");
         if (hk_code == null) {
           hk_code = (String)rec.get("BYMKR_BRIEF");
         }
         getJtable().setValueAt(hk_code, lastSelectedRow, 1);

         String countryOfMkr = (String)rec.get("BYMKR_CNTY_CODE");
         String cityOfMkr = (String)rec.get("BYMKR_CITY_NAME");
         Record recData = (Record)getDisplayingRecords().get(lastSelectedRow);
         recData.set("PROD_CNTY", countryOfMkr);
         recData.set("PROD_CITY", cityOfMkr);
         //set buyer maker's name and 4 address
         recData.set("MAKER_CODE", hk_code);
         recData.set(21, rec.get("BYMKR_NAME")); //buyer maker name
         recData.set(22, rec.get("BYMKR_ADDR1")); //addr1
         recData.set(23, rec.get("BYMKR_ADDR2")); //addr2
         recData.set(24, rec.get("BYMKR_ADDR3")); //addr3
         recData.set(25, rec.get("BYMKR_ADDR4")); //addr4

         exgui.ultratable.Wraper4tblCbx CountryRp = new exgui.ultratable.
             Wraper4tblCbx();
         CountryRp.setString((countryOfMkr == null) ? "" : countryOfMkr);
         CountryRp.setValue(countryOfMkr);
         getJtable().setValueAt(CountryRp, lastSelectedRow, 5);

         exgui.ultratable.Wraper4tblCbx CityRp = new exgui.ultratable.
             Wraper4tblCbx();
         CityRp.setString((cityOfMkr == null) ? "" : cityOfMkr);
         CityRp.setValue(cityOfMkr);
         getJtable().setValueAt(CityRp, lastSelectedRow, 6);

         recData.set("prod_maker", rec.get(0));
         recData.set("is_maker_changed", "1");
       }
     } catch (Exception exp) {
       exp.printStackTrace();
       util.ExceptionLog.exp2File(exp, "");
     }
   }
 }
  public void mouseClicked(java.awt.event.MouseEvent e){
     if(getJtable().getSelectedColumn()==2){
       //open select buyer dialog
       lastSelectedRow=getJtable().getSelectedRow();
       try{
         if(IS_SHIPPED){
           Record rec = (Record)getDisplayingRecords().get(lastSelectedRow);
           int shipped_count = rec.getInt("shipped_count");
           if (shipped_count>0) {
             //this ct is shipped,canot edit
             return;
           }
         }
       }catch(Exception exp){
         exp.printStackTrace();
       }
       slkMaker.btnDots_actionPerformed(null);
       return;
     }
     if(getJtable().getSelectedColumn()==4){
       //open select buyer vender
       lastSelectedRow=getJtable().getSelectedRow();
       try{
         if(IS_SHIPPED){
           Record rec = (Record)getDisplayingRecords().get(lastSelectedRow);
           int shipped_count = rec.getInt("shipped_count");
           if (shipped_count>0) {
             //this ct is shipped,canot edit
             return;
           }
         }
       }catch(Exception exp){
         exp.printStackTrace();
       }
       //slkVdr.btnDots_actionPerformed(null);
       Record recData = (Record)getDisplayingRecords().get(lastSelectedRow);
       try{
          Object vdrSeq=recData.get("VENDER_SEQ");

          DlgSlkVenderInfor dlg=new DlgSlkVenderInfor(util.PublicVariable.APP_FRAME,
                                                   "Select Vendor",true,
                                                   vdrSeq==null?-1:Integer.parseInt(vdrSeq.toString()),this);
          dlg.setSize(600,360);
          exgui.UIHelper.setToScreenCenter(dlg);
          dlg.show();
          /*
          if(dlg.getCloseStatus()!=dlg.STATUS_CLOSE_NORMALLY)return;//just close/exit before selected
          Record recVender=dlg.getVenderRec();
          venderChanged(recVender);
          venderInforChanged(dlg.getVenderInforRec());
          dlg=null;
          */
       }catch(Exception exp){
         exp.printStackTrace();
       }

       return;
     }


  }

  public void mousePressed(java.awt.event.MouseEvent e){

  }
  public void mouseReleased(java.awt.event.MouseEvent e){

  }
  public void mouseEntered(java.awt.event.MouseEvent e){

  }
  public void mouseExited(java.awt.event.MouseEvent e){

  }
  public util.InsertionOrderedHashMap getHeadColumnMap(){
    CT_PAYMENTERM_AT=-1;
    CT_ISSUE_AT=-1;
    util.InsertionOrderedHashMap iso=new util.InsertionOrderedHashMap();
    iso.put(DISP_CT_SEQ,DB_CT_SEQ);
    iso.put(DISP_MKR_CODE,DB_MKR_CODE);
    iso.put(DISP_MKR_BTN,DB_MKR_BTN);

    iso.put(DISP_VDR_CODE,DB_VDR_CODE);
    iso.put(DISP_VDR_BTN,DB_VDR_BTN);


    iso.put(DISPLAY_COUNTRY_NAME,DB_COUNTRY_NAME );
    iso.put(DISPLAY_CITY_NAME,DB_CITY_NAME );

    iso.put(DISP_PAYMENT_TERM,DB_PAYMENT_TERM);
    CT_PAYMENTERM_AT=iso.entrySet().size()-1;

    iso.put(DISP_CURRENCY,DB_CURRENCY);
    iso.put(DISP_PRICE_TERM,DB_PRICE_TERM);
    iso.put(DISP_DEST,DB_DEST);
    iso.put(DISP_ISSUE_DATE,DB_ISSUE_DATE);
    CT_ISSUE_AT=iso.entrySet().size()-1;

    iso.put(DISPLAY_BANK,DB_BANK);
    iso.put(DISPLAY_BANK_ADDR1,DB_BANK_ADDR1);
    iso.put(DISPLAY_BANK_ADDR2,DB_BANK_ADDR2);
    iso.put(DISPLAY_SWIFT,DB_SWIFT);
    iso.put(DISPLAY_RCPT,DB_RCPT);
    iso.put(DISPLAY_ACCOUNT_NO,DB_ACCOUNT_NO);

    if(util.PublicVariable.USER_RECORD.get(0).equals("NTERIC")){
      iso.put(DISPLAY_MKR_SIGNE_DATE,"PRINT_DATE");
      CT_PRINT_DATE_AT=iso.entrySet().size()-1;
    }

    return iso;
  }

  public exgui.ultratable.PagedDataFactory getPagedDataFactory(){
    newtimes.production.process.prodmaintain.DB_NthkCtHandler db=
        new newtimes.production.process.prodmaintain.DB_NthkCtHandler();
    dbHandler=db;
    return db;
  }
  class TblEditPlicy implements exgui.CellEditablePolicy{
    public boolean isCellEditable(int row,int column){
      if(isChecking4Update && column==1)return true;
      if(column==CT_PRINT_DATE_AT){
        Record rec = (Record)getDisplayingRecords().get(row);
        try{
          if (null == rec.get("PRINT_DATE")) {
            return false;
          }
        }catch(Exception exp){
          exp.printStackTrace();
        }
      }
      if(isChecking4Update)return true;
      if(column<4 )return false;
      if(IS_SHIPPED){
        try{
          Record rec = (Record)getDisplayingRecords().get(row);
          int ship_count =  rec.getInt("shipped_count");
          if(ship_count>0 && column==CT_PAYMENTERM_AT){
            return true;
          }
          if(ship_count>0 && column==CT_ISSUE_AT){
            return true;
          }


          return ! (ship_count>0);
        }catch(Exception exp){
                 exp.printStackTrace();
        }
      }
      return true;
    }
  }
  public Record setObject2Record(Record rec,int columnAt,Object value){
    try{
      String columnName=storedRecordColumn[columnAt];
      //if the modify field is maker_code,set to prod_maker field of real data.
      if(columnAt==1){
        //recData.set("is_maker_changed","1"); means maker changed.
        if(rec.get("is_maker_changed").toString().equals("1")){
          return rec;
        }else{
          return null;
        }
      }

      if(columnAt==3){
        if(rec.get("is_vendor_changed").toString().equals("1")){
          return rec;
        }else{
          return null;
        }
      }
      rec.set(columnName,value);
      return rec;
    }catch(Exception e){
      e.printStackTrace();
      return null;
    }
  }
  public  class CountyModifyListener implements ItemListener{
     public void itemStateChanged(ItemEvent ie){
       if(isRealChangeCountry){
         int row = getJtable().getSelectedRow();
         exgui.ultratable.Wraper4tblCbx item=new exgui.ultratable.Wraper4tblCbx();
         item.setString("");
         item.setValue(null);
         getJtable().setValueAt(item, row, 6);
       }
     }
  }
  public class DfxEditor4Country extends DefaultCellEditor{
    public DfxEditor4Country(JComboBox cbx){
      super(cbx);
    }
    public synchronized Component getTableCellEditorComponent(JTable table,
          Object value, boolean isSelected, int row, int column) {
      isRealChangeCountry=false;
      Component cmp2Return= super.getTableCellEditorComponent(table,value,isSelected,row,column);
      isRealChangeCountry=true;
      return cmp2Return;
    }

  }
  public class DfxEditor extends DefaultCellEditor{
    public DfxEditor(JComboBox cbx){
      super(cbx);
    }
    public  synchronized Component getTableCellEditorComponent(JTable table,
          Object value, boolean isSelected, int row, int column) {
     /*
      System.out.println(
      "getTableCellEdiorComponetCalled: value="+value+
      " isSelected "+String.valueOf(isSelected)+
      " row "+row+" column "+column);
      */
      iniComboboxModel(row);
      exgui.ultratable.Wraper4tblCbx obj2Rap=new exgui.ultratable.Wraper4tblCbx();
      obj2Rap.setValue(value);
      obj2Rap.setString((value==null)?"":value.toString());
      cbxCity.setSelectedItem(obj2Rap);
      return super.getTableCellEditorComponent(table,value,isSelected,row,column);
    }
    public boolean shouldSelectCell(EventObject anEvent) {
      //selectEditor((MouseEvent)anEvent);
      return super.shouldSelectCell(anEvent) ;
    }
    protected void iniComboboxModel(int row){

      Object objCountry=getJtable().getValueAt(row,5);
      if(objCountry==null||objCountry.toString().trim().equals("")){
        cbxCity.removeAllItems();
        cbxCity.setModel(new DefaultComboBoxModel(emptycity));
      }else{
        exgui.ultratable.Wraper4tblCbx obj[]=
            (exgui.ultratable.Wraper4tblCbx[])City_CountryMap.get(objCountry.toString());
        javax.swing.DefaultComboBoxModel mdl=new javax.swing.DefaultComboBoxModel(obj);
        cbxCity.removeAllItems();
        cbxCity.setModel(mdl);
      }
    }
  }


  protected void setCityCombox(){
    cbxCity=new JComboBox();
    exgui.MultiClassTableModel dtm=(exgui.MultiClassTableModel)getJtable().getModel();
    dtm.registEditableColumn(getJtable().getColumnName(6));
    DefaultCellEditor  ere=new DfxEditor(cbxCity);
    ere.setClickCountToStart(0);
    getJtable().getColumnModel().getColumn(6).setCellEditor(ere);
  }
  protected void makeTable(Vector vct){
    super.makeTable(vct);
    getJtable().getColumnModel().getColumn(0).setPreferredWidth(40); //ct seq.
    getJtable().getColumnModel().getColumn(2).setPreferredWidth(40); //maker button.
    getJtable().getColumnModel().getColumn(4).setPreferredWidth(40); //vendor button.

  }

   protected void setCountryCombox(){
     cbxCountry=new JComboBox();
     cbxCountry.addItemListener(countryModefied);
     exgui.MultiClassTableModel dtm=(exgui.MultiClassTableModel)getJtable().getModel();
     dtm.registEditableColumn(getJtable().getColumnName(5));
     javax.swing.DefaultComboBoxModel mdl=new javax.swing.DefaultComboBoxModel(countryNames);
     cbxCountry.removeAllItems();
     cbxCountry.setModel(mdl)  ;
     javax.swing.DefaultCellEditor dce=new DfxEditor4Country(cbxCountry);//new javax.swing.DefaultCellEditor(cbxCountry);
     dce.setClickCountToStart(0);
     getJtable().getColumnModel().getColumn(5).setCellEditor(dce);
   }
   class CellRender extends JLabel
       implements javax.swing.table.TableCellRenderer{
       public CellRender(){
       super();
      setBorder(javax.swing.BorderFactory.createRaisedBevelBorder());
      setOpaque(true); /* it\u00B4s essential */
      setHorizontalAlignment(JLabel.CENTER);
   }
    public Component getTableCellRendererComponent(
          javax.swing.JTable table, Object value,
          boolean isSelected, boolean hasFocus,
          int row, int column){
         String text = (value==null)?"":value.toString();
         if(text.trim().equals("")){
           setBackground(new java.awt.Color(0xFF, 0xFF, 0xFF)); // Decides the color
         }else{
             setBackground(new java.awt.Color(0xE0, 0xE0, 0xE0)); // Decides the color
         }
         setText(text);
      return this;
     }
   }

   protected void refineEditors(exgui.ultratable.MultiEditorJTable multiEditorJTableInSuper){
     multiEditorJTable=multiEditorJTableInSuper;
     setCountryCombox();  //3+2
     setCityCombox(); //4+2

     multiEditorJTableInSuper.setTableColumn2Grp(" MAKER ",1);
     multiEditorJTableInSuper.setTableColumn2Grp(" MAKER ",2);
     multiEditorJTableInSuper.setTableColumn2Grp(" VENDOR ",3);
     multiEditorJTableInSuper.setTableColumn2Grp(" VENDOR ",4);
     String titleBank="VENDOR'S BANK";
     multiEditorJTableInSuper.setTableColumn2Grp(titleBank,12);
     multiEditorJTableInSuper.setTableColumn2Grp(titleBank,13);
     multiEditorJTableInSuper.setTableColumn2Grp(titleBank,14);



     //multiEditorJTableInSuper.addButtons(2);
     //multiEditorJTableInSuper.addButtons(4);
     CellRender cdr=new CellRender();
     this.getJtable().getColumnModel().getColumn(2).setCellRenderer(cdr);
     this.getJtable().getColumnModel().getColumn(4).setCellRenderer(cdr);


     multiEditorJTableInSuper.addJComboBox(7,
        newtimes.preproduction.guis.tempProperties.tmpPaymentTerms
        ,"PYT_TRM","PYT_TRM");

    multiEditorJTableInSuper.addJComboBox(8,
       newtimes.preproduction.guis.tempProperties.tmpCurrency
       ,"CRNCY_NAME","CRNCY_NAME");

     multiEditorJTableInSuper.addJComboBox(9,
        newtimes.preproduction.guis.tempProperties.tmpPriceTerm
        ,"PRC_TRM","PRC_TRM");
  try{
    java.util.Vector dests =
        newtimes.production.process.prodmaintain.DB_ProdSC.getDestinations();
    multiEditorJTableInSuper.addJComboBox(10,dests, "dest_name", "dest_name");
    exgui.MultiClassTableModel mdl=(exgui.MultiClassTableModel)multiEditorJTableInSuper.getJTable().getModel();
    mdl.setCellEditablePolicy(new TblEditPlicy());

  }catch(Exception exp){
     exp.printStackTrace();
     util.ExceptionLog.exp2File(exp,"");
  }

     multiEditorJTableInSuper.setTextEditorVerifiers(getObject2StringConvertor());

   }
}
