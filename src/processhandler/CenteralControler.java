package processhandler;
import javax.swing.*;
import exgui2.*;
import java.util.*;
import processhandler.commands.*;
/**
 * <p>Title: CenteralControler</p>
 * <p>Description:Command Dispatcher (命令物件分發中心)</p>
 * <font color=blue>level: System(Singleton)</font>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company:meta.com.tw </p>
 * @author Crazy John.
 * @version 1.0
 *  */

public interface CenteralControler {
  public Cmd2AddMaster GOTO_ADDMASTER=new Cmd2AddMaster();
  public Cmd2EditMaster GOTO_EDITMASTER=new Cmd2EditMaster();
  public Cmd2QryGUI  SHOW_QUERY_GUI=new Cmd2QryGUI();
  public Cmd2ListQryResult  SHOW_QURY_RESULT=new Cmd2ListQryResult();
  public CmdEditDetail GOTO_EDIT_DETAIL=new CmdEditDetail();
  public Cmd2ShowDtl4QryRecord SHOW_DETAIL_OF_THIS_RECORD=new Cmd2ShowDtl4QryRecord();

  /**
   * set the Contaner JFrame of current application.<br>
   * allow this controler to modify the gui while run time.<br>
   * @param jframe the javax.swing.JFrame object
   */
  public void setMainFrame(JFrame jframe);
  /**
   * to set exgui2.BasicFrameWork to this dispather<br>
   * allow command object to set uper and lower frame work.<br>
   * @param bxFrame the BasicFrameWork
   */
  public void setBasicFrameWork(SplitFrame  bxFrame);
  /**
   * allow client class set command object direclty,without namming lookup
   * @param cmdObj object with some interface to exectue functions;
   * @throws CommandException if cmdObj is null
   */
  public void setSystemCommander(Object cmdObj)throws CommandException ;
  /**
   * set commander object to system for subsequent operation process.
   * once the command object is generated by lookup process,it would generate the coresponding gui to the action<br>
   * <font color=red>NOTE!!:</font><b>before trigerring command ,please make sure the required conditions of command are set to application properties,command object executes need to refer to some conditions.</b>
   * @param lookupCmdName to look up a command object from command factory.<br>
   * @throws CommandException ,IF no Command Object can be look up by the input name.
   */
  public Object setSystemCommander(String lookupCmdName)throws CommandException ;
  /**
   * a DataProcesser contents the function of update/addnew/delete,Delegating database operation to proxy object.
   * @return DataProcesser For the need or triggering the update/addnew/delete function from command buttons of gui.
   */
  public DataProcesser getDataProcesser();
  /**
   * to allow the classes out of this packages to set data processer.
   * @param dp pleaer refer to dataprocesser interface.common is generated by commad object
   */
  public void setDataProcesser(DataProcesser dp);
  /**
   * trigger current command object to excute actions coresponding to command type.
   * @param CommandTriggerType the Command type ,basically cmd types are defined(such as GOTO_ADDMASTER ...) in this interface <br>
   * On the other hand.you also can set your command object to trigger the very different action by your private command type<br>
   * @throws CommandException Either caused by RTTI or by runtime exception of a command object
   */
  public void doCommandExecute(CommandTrigger CommandTriggerType) throws CommandException ;
  /**
   *for the need of going back,this controler has to keep the list of executed interfaces<br>
   * allow to coperate with the method "getCmdTypeHistory"<br>
   * @return List ,the java.util.List, collection of interfaces coresponding to the action commands.
   */
  /**
   *for the need of going back,this controler has to keep the list of executed commands typs.<br>
   *allow to coperate with the method "getCmdHistory"
   * @return List the java.util.List,collection of Command Type
   */
   public List getTriggerHistory();
  /**
   * allow user to recall the last action(GUI)
   * @throws CommandException
   */
  public void goBack() throws CommandException;
  /**
   * call the centeral controler(this object) to record the Command Triger<br>
   * this method should be called within the method "" of some command triger object<br>
   * which should be record for "back" command to re-run the stored command execution.
   * @param cmdTrigger
   */
  public void recordProcess(CommandTrigger cmdTrigger);
  /**
   * in some condition,we need to set/get some attribute of current command object.
   * @return the Object of stored in current control system(the last look up command object)
   */
  public Object getCurrentSystemCommand();
  /**
   * the function is to indecate the record which the system is editing.
   * @param rec2Edit the record obejct to show detial or to mapping for editing .
   */
  public void setCurrentEditingMasterRecord(database.datatype.Record rec2Edit);
  /**
   *
   * @return record object which currnet system is editing.
   */
  public database.datatype.Record getCurrentEditingMasterRecord();
  /**
   * this function is called before generate the gui of co-responding detail data of a record.
   * @param tabIndex the selected tab panel index of tabbed panel
   * @param component the contaniner componect of selected tab panel index of tabbed panel<br>
   * if there is already has any gui on it,you don't need to re-generate the gui.
   */
  public void setTargetTab(int tabIndex,java.awt.Component component);
  /**
   * this function shoud be called before setting detail of a record to tabbed pane
   * @return the index of the selected tab
   */
   public int getSelectedTabIndex();
   /**
    * this function shoud be called before setting detail of a record to tabbed pane
    * @return awt component which may contain gui of detail data.
    */
   public java.awt.Component getSelectedTabComponent();
   /**
    * To return the last executed command trigger object of this controler center.
    * @return CommandTrigger --the last executed command trigger object
    */
   public CommandTrigger getLastExcCmdTgr();
}
